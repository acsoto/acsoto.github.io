{"title":"C++基础","date":"2021-04-30T03:00:00.000Z","date_formatted":{"ll":"Apr 30, 2021","L":"04/30/2021","MM-DD":"04-30"},"link":"posts/44178","tags":["BUAA","C++"],"updated":"2021-11-26T18:13:13.131Z","content":"<p><img src=\"CPP/%E7%9F%A5%E8%AF%86%E7%82%B9%E7%BA%B2%E8%A6%81.png\" alt=\"知识点纲要\" loading=\"lazy\" class=\"φbp\"></p>\n<p>结构</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">int</span> j;</span><br><span class=\"line\"><span class=\"keyword\">char</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于int需要占用4个字节，由于结构的空间分配是大对齐，总共需要12个空间。 当然也可以压缩空间，把它压缩为实际只使用的9个字节。</p>\n<p>压缩：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> pack(1)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"宏\">宏<a title=\"#宏\" href=\"#宏\"></a></h3>\n<p>函数宏</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])</span></span><br></pre></td></tr></table></figure>\n<p>控制宏</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HOME <span class=\"comment\">//用于控制开关</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> HOME</span></span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;link a&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"meta\">#elseif</span></span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;link b&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> WIN32 <span class=\"comment\">//windows平台上一定会有的宏</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>如果把C++程序和C程序混合编译</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun_C</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>这个语句就是用于告诉链接器，这个函数是用C标准编译的，不要按照C++编译器修饰的方式去找。</p>\n<p>函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.overloading</span></span><br><span class=\"line\"><span class=\"comment\">//2.default parameter</span></span><br><span class=\"line\"><span class=\"comment\">//默认参数必须放后</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun2</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b = <span class=\"number\">3</span>, <span class=\"keyword\">int</span> c = <span class=\"number\">4</span>)</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3.占位参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun3</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"number\">233</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"c++-面向对象\">C++ 面向对象<a title=\"#c++-面向对象\" href=\"#c++-面向对象\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *name;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(<span class=\"keyword\">int</span> aage, <span class=\"keyword\">char</span> *aname);</span><br><span class=\"line\">    ~<span class=\"built_in\">Person</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Person::<span class=\"built_in\">Person</span>(<span class=\"keyword\">int</span> aage, <span class=\"keyword\">char</span> *aname) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;age = aage;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;name = aname;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person::~<span class=\"built_in\">Person</span>()&#123;</span><br><span class=\"line\">    <span class=\"comment\">//析构函数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>struct和class区别：class默认成员变量private</p>\n<p>默认构造：不带括号</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Test <span class=\"title\">t1</span><span class=\"params\">(<span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\">Test *t2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Test</span>();</span><br><span class=\"line\"><span class=\"function\">Test <span class=\"title\">t3</span><span class=\"params\">(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">Test <span class=\"title\">t4</span><span class=\"params\">()</span></span>; <span class=\"comment\">//this is a function</span></span><br><span class=\"line\">Test t4;</span><br><span class=\"line\">Test *t5 = <span class=\"keyword\">new</span> <span class=\"built_in\">Test</span>(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<p>函数的原则：尽量不用返回值去返回，输入输出参数放在参数里</p>\n<p>成员变量原则：</p>\n<p>value：必然组成部分</p>\n<p>address：可有可无的部分</p>\n<p>类嵌套：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span>&#123;</span></span><br><span class=\"line\">    Point *p;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span>&#123;</span></span><br><span class=\"line\">    Circle c;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>析构函数(destructor)：</p>\n<p>对象消亡时自动调用</p>\n<p>可用于free堆区malloc</p>\n<p>防止重复free，free时：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">        p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"指针与引用\">指针与引用<a title=\"#指针与引用\" href=\"#指针与引用\"></a></h3>\n<p>指针的问题</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. fly pointer (if null / assert)</span></span><br><span class=\"line\"><span class=\"comment\">//2. memory leak (free)</span></span><br><span class=\"line\"><span class=\"comment\">//3. return addr of local var</span></span><br><span class=\"line\"><span class=\"comment\">//4. multi-pointers for one object</span></span><br></pre></td></tr></table></figure>\n<p>引用</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//reference 引用</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> m = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;r = m; <span class=\"comment\">//m的小名</span></span><br></pre></td></tr></table></figure>\n<p>对象的copy</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//bitwise copy 浅拷贝（默认） vs. logical copy 深拷贝</span></span><br><span class=\"line\"><span class=\"comment\">//copy constructor</span></span><br><span class=\"line\">Test::<span class=\"built_in\">Test</span>(Test &amp;t) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;i = t.i;</span><br><span class=\"line\">    <span class=\"comment\">//!!!this-&gt; = t.j</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;j = (<span class=\"keyword\">int</span> *) <span class=\"built_in\">malloc</span>(<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">    *j = *t.j;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>e</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//    pass by value vs. pass by address(pointer or reference)</span></span><br><span class=\"line\"><span class=\"comment\">//效果 read              read/write</span></span><br><span class=\"line\"><span class=\"comment\">//性能 sizeof(object)    sizeof(int)</span></span><br><span class=\"line\"><span class=\"comment\">//麻烦 copy-constructor  nothing</span></span><br><span class=\"line\"><span class=\"comment\">//conclusion: never pass by value(build-in type except)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"new-and-delete\">new and delete<a title=\"#new-and-delete\" href=\"#new-and-delete\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Test *p = (Test *)malloc(sizeof (Test));</span></span><br><span class=\"line\">Test *p =<span class=\"keyword\">new</span> <span class=\"built_in\">Test</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">//new = malloc + constructor</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> p;</span><br><span class=\"line\"><span class=\"comment\">//delete = destructor + free;</span></span><br><span class=\"line\"><span class=\"comment\">//多个对象</span></span><br><span class=\"line\">Test *p = <span class=\"keyword\">new</span> Test[<span class=\"number\">10</span>]; <span class=\"comment\">//要求有默认构造</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> []p;</span><br></pre></td></tr></table></figure>\n<h3 id=\"常量\">常量<a title=\"#常量\" href=\"#常量\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Test::fun</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//read only function</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Test t;</span><br><span class=\"line\">t.<span class=\"built_in\">fun</span>();</span><br></pre></td></tr></table></figure>\n<h3 id=\"static\">static<a title=\"#static\" href=\"#static\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i; <span class=\"comment\">//堆区，与全局变量同</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"extern\">extern<a title=\"#extern\" href=\"#extern\"></a></h6>\n<p>全局变量不定义在头文件，定义在某一源文件中</p>\n<p>extern外链接放在头文件。</p>\n<p>函数默认extern外链接，用static修饰表明作用域为本文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extern int g_i;</span><br></pre></td></tr></table></figure>\n<p>类中static修饰：全类的共享空间</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Test</span>(<span class=\"keyword\">int</span> aj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//显示一次性初始化</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> Test::i = <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n<p>static无this指针</p>\n<h3 id=\"operator\">operator<a title=\"#operator\" href=\"#operator\"></a></h3>\n<p>重载运算符</p>\n<p><code>[]</code> 重载数组 <code>*</code> 重载取内容 <code>new delet</code> 重载malloc <code>++</code>重载++</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> balance;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Account &amp;<span class=\"keyword\">operator</span>+(<span class=\"keyword\">int</span> n);</span><br><span class=\"line\">    <span class=\"comment\">//++a</span></span><br><span class=\"line\">    Account&amp; <span class=\"keyword\">operator</span>++();</span><br><span class=\"line\">    <span class=\"comment\">//a++</span></span><br><span class=\"line\">    Account <span class=\"keyword\">operator</span>++(<span class=\"keyword\">int</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Account &amp;Account::<span class=\"keyword\">operator</span>+(<span class=\"keyword\">int</span> n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;balance += n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Account&amp; Account::<span class=\"keyword\">operator</span>++() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;balance++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Account Account::<span class=\"keyword\">operator</span>++(<span class=\"keyword\">int</span>) &#123;</span><br><span class=\"line\">    Account old = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;balance++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> old;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Account a;</span><br><span class=\"line\">    a = a+<span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"继承(inheritance)与组成(composition)\">继承(inheritance)与组成(composition)<a title=\"#继承(inheritance)与组成(composition)\" href=\"#继承(inheritance)与组成(composition)\"></a></h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//(derived class)子类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> :</span> <span class=\"keyword\">public</span> Borrower</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">borrow_book</span><span class=\"params\">()</span></span>;    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Student::borrow_book</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Borrower::<span class=\"built_in\">borrow_book</span>();</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;if&gt;=5 return&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意构造顺序</p>\n<p>子类构造器自动调用父类构造器，析构相反</p>\n<p>组成也会先自动调用内部对象的构造(Engine initial - Car initial)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//构造器初始化列表(若没有默认构造无法默认调用)</span></span><br><span class=\"line\">Derived::<span class=\"built_in\">Derived</span>(<span class=\"keyword\">int</span> ai, <span class=\"keyword\">int</span> aj):<span class=\"built_in\">Base</span>(ai)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//有先后顺序</span></span><br><span class=\"line\">Test::<span class=\"built_in\">Test</span>(<span class=\"keyword\">int</span> ai, <span class=\"keyword\">int</span> aj) :<span class=\"built_in\">i</span>(ai),<span class=\"built_in\">j</span>(aj)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多继承(菱形结构)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span> :</span> <span class=\"keyword\">public</span> Base1, <span class=\"keyword\">public</span> Base2&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多态\">多态<a title=\"#多态\" href=\"#多态\"></a></h3>\n<ol>\n<li>upcasting 向上转换</li>\n<li>later binding vs. early binding</li>\n<li>polymorphism 多态性</li>\n<li>virtual</li>\n<li>constructor &amp; destructor 构造无多态，析构往往多态</li>\n<li>abstract class (interface in Java &amp; C#)</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pet</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span>; <span class=\"comment\">//虚函数 内存占用+8 子类自动virtual</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Needle</span><span class=\"params\">(Pet&amp; pet)</span> <span class=\"comment\">//never pass by value 拷贝构造使多态失效</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//binding</span></span><br><span class=\"line\">    <span class=\"comment\">//1. early binding</span></span><br><span class=\"line\">    <span class=\"comment\">//2. later(dynamic/runtime) binding</span></span><br><span class=\"line\">    pet.<span class=\"built_in\">speak</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多态的实现：</p>\n<p>类：V-table 虚函数表</p>\n<p>对象：V-ptr 指向本类虚函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//纯虚函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//抽象类：含纯虚函数，无法创建对象</span></span><br></pre></td></tr></table></figure>\n<p>行为串联：当两个类别家族因为行为共性发生关系时，用抽象类来关联两个类别家族</p>\n<h5 id=\"template-class\">template class<a title=\"#template-class\" href=\"#template-class\"></a></h5>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//template class 模板类 collection in Java</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span> &#123;</span></span><br><span class=\"line\">    T pool[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> top;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//内联函数 inline function</span></span><br><span class=\"line\">    <span class=\"comment\">//top=0</span></span><br><span class=\"line\">    <span class=\"built_in\">Stack</span>() : <span class=\"built_in\">top</span>(<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(T v)</span> </span>&#123;</span><br><span class=\"line\">        pool[top++] = v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pool[--top];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Stack&lt;<span class=\"keyword\">int</span>&gt; s1;</span><br><span class=\"line\">    Stack&lt;<span class=\"keyword\">double</span>&gt; s2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>STL</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//STL: standard template library</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; ++i) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        v.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; v[<span class=\"number\">9988</span>] &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>iterator</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;</span><br><span class=\"line\">    v.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt;::iterator it = v.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (it != v.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">    cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class=\"line\">    it++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>name space类上一级层次</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> my_nsp</span><br></pre></td></tr></table></figure>\n<p>try catch 和Java一样</p>\n<p>assert</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//让断言全部失效</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NDEBUG</span></span><br></pre></td></tr></table></figure>\n<p>friend</p>\n","prev":{"title":"BUAAOO-第三单元总结","link":"posts/4801"},"next":{"title":"BUAAOO-第二单元总结","link":"posts/54734"},"plink":"http://atksoto.com/posts/44178/","toc":[{"id":"宏","title":"宏","index":"1"},{"id":"c++-面向对象","title":"C++ 面向对象","index":"2"},{"id":"指针与引用","title":"指针与引用","index":"3"},{"id":"new-and-delete","title":"new and delete","index":"4"},{"id":"常量","title":"常量","index":"5"},{"id":"static","title":"static","index":"6"},{"id":"operator","title":"operator","index":"7"},{"id":"继承(inheritance)与组成(composition)","title":"继承(inheritance)与组成(composition)","index":"8"},{"id":"多态","title":"多态","index":"9"}],"reading_time":"1443 words in 10 min"}