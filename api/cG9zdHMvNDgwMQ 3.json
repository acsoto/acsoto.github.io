{"title":"BUAAOO-第三单元总结","date":"2021-05-29T03:54:00.000Z","date_formatted":{"ll":"May 29, 2021","L":"05/29/2021","MM-DD":"05-29"},"link":"posts/4801","tags":["BUAA","OO"],"updated":"2021-11-26T18:13:13.139Z","content":"<h1 id=\"buaaoo-第三单元总结\">BUAAOO-第三单元总结<a title=\"#buaaoo-第三单元总结\" href=\"#buaaoo-第三单元总结\"></a></h1>\n<h3 id=\"实现规格所采取的设计策略\">实现规格所采取的设计策略<a title=\"#实现规格所采取的设计策略\" href=\"#实现规格所采取的设计策略\"></a></h3>\n<p>在第一次作业中，开始没有经验，采取了直接对规格进行“翻译”的策略，对数据保存直接使用了定长数组，后发现这样操作代码可读性不高且性能较差，于使重新改写为使用HashMap保存。</p>\n<p>第二次作业中，虽然使用容器实现了数据存储，但是算法方面由于直接按照规格描述进行实现，导致了大量的CTLE。于使此后，阅读完规格后我能对方法有彻底理解后再根据自己的理解去实现。</p>\n<p>再有以上经验后，认为实现规格应采取如下步骤：</p>\n<ol>\n<li>完整阅读规格</li>\n<li>选择正确的数据结构，容器</li>\n<li>正确处理异常</li>\n<li>选择合适的算法实现方法</li>\n</ol>\n<h3 id=\"基于jml规格来设计测试的方法和策略\">基于JML规格来设计测试的方法和策略<a title=\"#基于jml规格来设计测试的方法和策略\" href=\"#基于jml规格来设计测试的方法和策略\"></a></h3>\n<ol>\n<li>再次阅读JML规格，检查在方法被实现前，异常是否被正确，处理检查方法是否满足规格的ensure</li>\n<li>使用Junit，针对每一个具一定不确定因素的方法编写测试样例进行测试</li>\n<li>对程序整体进行大数据集测试</li>\n</ol>\n<p>本单元看似简单，但在测试方面我做的并不理想，在三次作业中均出现了<strong>非常低级</strong>的BUG</p>\n<p>第一次：</p>\n<p><img src=\"/posts/4801/image-20210529112328093.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>原因是在阅读JML时并未彻底理解其含义，直接按照规格进行书写，导致进行了逻辑完全错误的一个判断</p>\n<p>第二次：</p>\n<p><img src=\"/posts/4801/image-20210529112535556.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>低估了自己犯低级错误的的概率（当然本次作业主要问题在CTLE上）</p>\n<p>第三次：</p>\n<p><img src=\"/posts/4801/image-20210529112659701.png\" alt loading=\"lazy\" class=\"φbp\"></p>\n<p>自作聪明在判断异常之前就删除了message，造成了大量WA</p>\n<p>三次作业出现的bug基本都是在阅读JML规格时<strong>丧失理性</strong>造成的，事实证明在阅读JML时候一定要保证独立思考的能力，当然锅也不能全部甩到这里，<strong>归根结底还是自己懒得测试且高估了自己写简单代码不出错的能力</strong>。</p>\n<p>(Junit暴力测试？)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@org</span>.junit.jupiter.api.<span class=\"function\">Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendIndirectMessage</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> EqualPersonIdException, PersonIdNotFoundException, EqualRelationException, MessageIdNotFoundException, EmojiIdNotFoundException, EqualMessageIdException, RelationNotFoundException, EqualEmojiIdException </span>&#123;</span><br><span class=\"line\">    Network network = <span class=\"keyword\">new</span> MyNetwork();</span><br><span class=\"line\">    network.addPerson(<span class=\"keyword\">new</span> MyPerson(<span class=\"number\">1</span>, <span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">    network.addPerson(<span class=\"keyword\">new</span> MyPerson(<span class=\"number\">3</span>, <span class=\"string\">&quot;N&quot;</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">    network.addPerson(<span class=\"keyword\">new</span> MyPerson(<span class=\"number\">6</span>, <span class=\"string\">&quot;F&quot;</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">    network.addRelation(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">    network.addRelation(<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">    network.addRelation(<span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">26</span>);</span><br><span class=\"line\">    network.storeEmojiId(<span class=\"number\">1</span>);</span><br><span class=\"line\">    network.storeEmojiId(<span class=\"number\">3</span>);</span><br><span class=\"line\">    network.storeEmojiId(<span class=\"number\">5</span>);</span><br><span class=\"line\">    network.storeEmojiId(<span class=\"number\">7</span>);</span><br><span class=\"line\">    network.storeEmojiId(<span class=\"number\">9</span>);</span><br><span class=\"line\">    network.storeEmojiId(<span class=\"number\">91</span>);</span><br><span class=\"line\">    network.addMessage(<span class=\"keyword\">new</span> MyMessage(<span class=\"number\">1</span>, <span class=\"number\">10</span>, network.getPerson(<span class=\"number\">1</span>), network.getPerson(<span class=\"number\">6</span>)));</span><br><span class=\"line\">    network.addMessage(<span class=\"keyword\">new</span> MyEmojiMessage(<span class=\"number\">2</span>, <span class=\"number\">1</span>, network.getPerson(<span class=\"number\">1</span>), network.getPerson(<span class=\"number\">6</span>)));</span><br><span class=\"line\">    network.addMessage(<span class=\"keyword\">new</span> MyEmojiMessage(<span class=\"number\">3</span>, <span class=\"number\">1</span>, network.getPerson(<span class=\"number\">1</span>), network.getPerson(<span class=\"number\">6</span>)));</span><br><span class=\"line\">    network.addMessage(<span class=\"keyword\">new</span> MyEmojiMessage(<span class=\"number\">4</span>, <span class=\"number\">1</span>, network.getPerson(<span class=\"number\">1</span>), network.getPerson(<span class=\"number\">6</span>)));</span><br><span class=\"line\">    network.addMessage(<span class=\"keyword\">new</span> MyEmojiMessage(<span class=\"number\">5</span>, <span class=\"number\">3</span>, network.getPerson(<span class=\"number\">1</span>), network.getPerson(<span class=\"number\">6</span>)));</span><br><span class=\"line\">    network.addMessage(<span class=\"keyword\">new</span> MyEmojiMessage(<span class=\"number\">6</span>, <span class=\"number\">9</span>, network.getPerson(<span class=\"number\">1</span>), network.getPerson(<span class=\"number\">6</span>)));</span><br><span class=\"line\">    network.addMessage(<span class=\"keyword\">new</span> MyEmojiMessage(<span class=\"number\">7</span>, <span class=\"number\">91</span>, network.getPerson(<span class=\"number\">1</span>), network.getPerson(<span class=\"number\">6</span>)));</span><br><span class=\"line\">    network.addMessage(<span class=\"keyword\">new</span> MyEmojiMessage(<span class=\"number\">8</span>, <span class=\"number\">91</span>, network.getPerson(<span class=\"number\">1</span>), network.getPerson(<span class=\"number\">6</span>)));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">        network.sendMessage(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    assertEquals(<span class=\"number\">4</span>, network.deleteColdEmoji(<span class=\"number\">1</span>));</span><br><span class=\"line\">    assertEquals(<span class=\"keyword\">true</span>,network.containsEmojiId(<span class=\"number\">91</span>));</span><br><span class=\"line\">    network.deleteColdEmoji(<span class=\"number\">3</span>);</span><br><span class=\"line\">    assertEquals(<span class=\"keyword\">false</span>,network.containsEmojiId(<span class=\"number\">91</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"容器选择和使用的经验\">容器选择和使用的经验<a title=\"#容器选择和使用的经验\" href=\"#容器选择和使用的经验\"></a></h3>\n<ol>\n<li>避免直接使用定长数组。</li>\n<li>根据需求进行容器的选择，如果对象是通过ID来进行大部分操作，那么使用HashMap进行存储，如果对象如Person.messages，需要从头取出，从尾放入等操作，则使用ArrayList进行存储。适当的情景下也可使用Hashset来做集合的不重复性。</li>\n<li>不确定要用什么的情况下，似乎还是用HashMap比较靠谱</li>\n</ol>\n<h3 id=\"性能问题\">性能问题<a title=\"#性能问题\" href=\"#性能问题\"></a></h3>\n<p>本次作业会出现的性能问题主要集中在容器的选择，qbs的算法，ageMean，ageVar等的算法。</p>\n<p>对于容器的问题，我的避免超时的方法是采取了适合的容器如HashMap</p>\n<p>我在第二次作业中大面积出现了性能问题（估计能踩的坑我都踩了）</p>\n<ol>\n<li>qbs的算法采用了规格描述的算法直接进计算，于使我对其进行了并查集算法的修改，在addPerson和delPerson的时候就对拥有同一个根节点的节点构成一个集合。（一开始还写了DFS，慢的要死就算了，还写了一堆BUG，忙一下午，服了。）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HashMap&lt;Integer, Integer&gt; parent = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HashMap&lt;Integer, Integer&gt; rank = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (parent.get(id) != id) &#123;</span><br><span class=\"line\">           parent.put(id, find(parent.get(id)));</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> parent.get(id);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> id1, <span class=\"keyword\">int</span> id2)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> p = find(id1);</span><br><span class=\"line\">       <span class=\"keyword\">int</span> q = find(id2);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (p == q) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (rank.get(p) &lt; rank.get(q)) &#123;</span><br><span class=\"line\">           parent.put(p, q);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rank.get(p) &gt; rank.get(q)) &#123;</span><br><span class=\"line\">           parent.put(q, p);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           parent.put(p, q);</span><br><span class=\"line\">           rank.put(q, rank.get(q) + <span class=\"number\">1</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>ageMean，ageVar等的计算，起初我的计算直接采用了每次调用方法是从头开始计算的实现，结果导致每次计算要消耗大量的CPU超时，导致了CTLE，后改为在进行addperson的时候直接进行累加加和的操作，在询问ageMean的时候可以直接进行返回。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> ageSum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> ageMean = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> ageVar = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> valueSum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addPerson</span><span class=\"params\">(Person person)</span> </span>&#123;</span><br><span class=\"line\">    people.put(person.getId(), person);</span><br><span class=\"line\">    ageSum += person.getAge();</span><br><span class=\"line\">    ageMean = ageSum / people.size();</span><br><span class=\"line\">    ageVar = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Person p : people.values()) &#123;</span><br><span class=\"line\">        ageVar += (p.getAge() - ageMean) * (p.getAge() - ageMean);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.isLinked(person)) &#123;</span><br><span class=\"line\">            valueSum += p.queryValue(person) * <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ageVar = ageVar / people.size();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delPerson</span><span class=\"params\">(Person person)</span> </span>&#123;</span><br><span class=\"line\">    people.remove(person.getId());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (people.isEmpty()) &#123;</span><br><span class=\"line\">        initialData();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ageSum -= person.getAge();</span><br><span class=\"line\">    ageMean = ageSum / people.size();</span><br><span class=\"line\">    ageVar = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Person p : people.values()) &#123;</span><br><span class=\"line\">        ageVar += (p.getAge() - ageMean) * (p.getAge() - ageMean);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.isLinked(person)) &#123;</span><br><span class=\"line\">            valueSum -= p.queryValue(person) * <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ageVar = ageVar / people.size();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"架构设计\">架构设计<a title=\"#架构设计\" href=\"#架构设计\"></a></h3>\n<p>除了各个对象的HashMap以外，network维护一个并查集，group维护多个基本数据，在addPerson的能操作时进行各个数据的更新。</p>\n<p>不知道写什么了，这单元挺搞心态的，对自己写BUG的能力又有了新的认识，因为自己时间不够能力不足，总做不好测试这一块，我也不知道怎么办，就尽力别写bug吧。不讲丧气话，这单元学到了JML规格相关知识，好像还是挺“严谨”的，如果以后工作或者什么遇到了，应该挺受益的，不过有一说一，我是不会愿意去自己写这个JML的，如果有中文版的JML能几句话讲清楚，那没准可以试试。</p>\n","prev":{"title":"BUAAOO-第四单元总结","link":"posts/8987"},"next":{"title":"C++基础","link":"posts/44178"},"plink":"http://atksoto.com/posts/4801/","toc":[{"id":"buaaoo-第三单元总结","title":"BUAAOO-第三单元总结","index":"1","children":[{"id":"实现规格所采取的设计策略","title":"实现规格所采取的设计策略","index":"1.1"},{"id":"基于jml规格来设计测试的方法和策略","title":"基于JML规格来设计测试的方法和策略","index":"1.2"},{"id":"容器选择和使用的经验","title":"容器选择和使用的经验","index":"1.3"},{"id":"性能问题","title":"性能问题","index":"1.4"},{"id":"架构设计","title":"架构设计","index":"1.5"}]}],"reading_time":"1663 words in 11 min"}