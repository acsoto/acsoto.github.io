<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BUAA on My New Hugo Site</title>
    <link>http://example.org/tags/buaa/</link>
    <description>Recent content in BUAA on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Nov 2021 16:29:00 +0000</lastBuildDate><atom:link href="http://example.org/tags/buaa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Alxa_Compiler 编译器</title>
      <link>http://example.org/posts/alxa_compiler-%E7%BC%96%E8%AF%91%E5%99%A8/</link>
      <pubDate>Tue, 16 Nov 2021 16:29:00 +0000</pubDate>
      
      <guid>http://example.org/posts/alxa_compiler-%E7%BC%96%E8%AF%91%E5%99%A8/</guid>
      <description>相关文章：[[编译实验总结感想]]
词法分析 Before Code Requriement: read testfile.txt, parse every char to word and print them. At the same time, memorize type, content and line number of each word.
File reading Read by line, scan every char of every string and analyse.
while ((s = bf.readLine()) != null) { ... } Analyse When i get the key word, enter the next analyst.
while ((c = getChar()) != null) { if (c == &amp;#39; &amp;#39; || c == &amp;#39;\r&amp;#39; || c == &amp;#39;\t&amp;#39;) { continue; } else if (c == &amp;#39;+&amp;#39; || c == &amp;#39;-&amp;#39; || c == &amp;#39;*&amp;#39; || c == &amp;#39;%&amp;#39;) { words.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;基础</title>
      <link>http://example.org/posts/%E8%AF%BE%E7%A8%8B/c&#43;&#43;%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Fri, 30 Apr 2021 11:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/%E8%AF%BE%E7%A8%8B/c&#43;&#43;%E5%9F%BA%E7%A1%80/</guid>
      <description>知识点纲要 
结构
struct Student { int i; int j; char c; } 由于int需要占用4个字节，由于结构的空间分配是大对齐，总共需要12个空间。 当然也可以压缩空间，把它压缩为实际只使用的9个字节。
压缩：
#pragma pack(1) 宏 函数宏
#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0]) 控制宏
#define HOME //用于控制开关 #ifdef HOME cout &amp;lt;&amp;lt; &amp;#34;link a&amp;#34; &amp;lt;&amp;lt; endl; #elseif cout &amp;lt;&amp;lt; &amp;#34;link b&amp;#34; &amp;lt;&amp;lt; endl; #endif #ifdef WIN32 //windows平台上一定会有的宏 #include &amp;lt;windows.h&amp;gt;#endif 如果把C++程序和C程序混合编译
extern &amp;#34;C&amp;#34; void fun_C(); 这个语句就是用于告诉链接器，这个函数是用C标准编译的，不要按照C++编译器修饰的方式去找。
函数
//1.overloading //2.default parameter //默认参数必须放后 void fun2(int a, int b = 3, int c = 4) { cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; b &amp;lt;&amp;lt; c &amp;lt;&amp;lt; endl; } //3.</description>
    </item>
    
    <item>
      <title>失败的逻辑课程笔记</title>
      <link>http://example.org/posts/%E8%AF%BE%E7%A8%8B/%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%80%BB%E8%BE%91%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 29 Oct 2020 11:54:00 +0000</pubDate>
      
      <guid>http://example.org/posts/%E8%AF%BE%E7%A8%8B/%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%80%BB%E8%BE%91%E6%80%BB%E7%BB%93/</guid>
      <description>失败的规律 墨菲定律 定义 如果做某项工作有多种方法，而其中有一种方法将导致事故，那么一定有人会按这种方法去做。
四种表现形式 （注意：都不是一定的）
 任何事都没有表面看起来那么简单 所有的事都会比你预计的时间长 会出错的事不论概率多小总会出错 如果你担心某种情况发生，那么它就更有可能发生  启示  不忽视小概率事件 未雨绸缪 应急预案，动态调整 事故学习，反思  海因里希法则 定义 1：29：300
事故因果连锁论 伤亡事故的发生不是一个孤立的事件，是一系列事件相继发生的结果。
 1，事故往往起于人而又终止于人
2，人的不安全行为是大多数工伤事故的原因
3，人在受到伤害前，已经历数百次没有造成伤害的同类事故
4，人受到伤害的严重程度具有随机性，大多可以避免
5，人不安全行为的主要原因是不正确的态度
 启示 企业安全工作的中心就是防止人的不安全行为，消除机械的或物质的不安全状态，中断事故连锁的进程而避免事故的发生。
浴盆曲线 可靠性：完成规定功能的能力
可靠度：完成规定功能的概率
可靠度 MTBF
不可靠度 MTTF
故障率 浴盆曲线
失败的分析 失败分析三种方式 模式 FMECA 故障模式影响及危害性分析
原因 FTA 故障树
事件 ETA 事件树
失败风险 两个要素：失败的概率和后果
技术，费用，进度风险
风险识别，风险分析（可能性，后果严重性），风险排序
管理，评估，应对
失败的预防 优生优育  优质材料 降额\裕度设计 余度设计 健壮设计 耐环境设计 放错设计  养生保健  熟练的使用 定期的维护 有力的保障 持续的改进  失败的思维 如何看待失败 知识管理的概念 从失败中学习：知识的螺旋 吃一堑长一智：失败知识从哪来 失败知识的共享 失败知识的应用</description>
    </item>
    
  </channel>
</rss>
