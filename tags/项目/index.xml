<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>项目 on SOTO-BLOG</title>
    <link>https://zzhgo.com/tags/%E9%A1%B9%E7%9B%AE/</link>
    <description>Recent content in 项目 on SOTO-BLOG</description>
    <image>
      <url>https://pic.mcac.cc/202301012340641.jpg</url>
      <link>https://pic.mcac.cc/202301012340641.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 07 Dec 2021 19:14:00 +0000</lastBuildDate><atom:link href="https://zzhgo.com/tags/%E9%A1%B9%E7%9B%AE/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TakeawayDelivery 后端实现</title>
      <link>https://zzhgo.com/posts/projects/takeawaydelivery-back/</link>
      <pubDate>Tue, 07 Dec 2021 19:14:00 +0000</pubDate>
      
      <guid>https://zzhgo.com/posts/projects/takeawaydelivery-back/</guid>
      <description>TakeawayDelivery 后端实现 开发环境 Python Django PyTorch MySQL 云端部署 我们将后端Django和数据库均部署在服务器上，并且进行了域名解析，可以通过delivery.mcatk.com直接访问后端，前端可以在任意情况下发送请求。
服务器供应：腾讯云&amp;amp;阿里云 服务器系统：CentOS 7 数据库：MySQL 5 解释器：Anaconda 3
数据库结构 后端实现接口 path(&amp;#39;api/login/&amp;#39;, myapp.views.login), path(&amp;#39;api/register/&amp;#39;, myapp.views.register), path(&amp;#39;api/getInformation/&amp;#39;, myapp.views.get_information), path(&amp;#39;api/changeInformation/&amp;#39;, myapp.views.change_information), path(&amp;#39;api/changePassword/&amp;#39;, myapp.views.change_password), path(&amp;#39;api/getStores/&amp;#39;, myapp.views.get_stores), path(&amp;#39;api/getStoreInformation/&amp;#39;, myapp.views.get_store_information), path(&amp;#39;api/deleteUser/&amp;#39;, myapp.views.delete_user), path(&amp;#39;api/getEvaluateFood/&amp;#39;, myapp.views.get_evaluate_food), path(&amp;#39;api/evaluateFood/&amp;#39;, myapp.views.evaluate_food), path(&amp;#39;api/deleteEvaluateFood/&amp;#39;, myapp.views.delete_evaluate_food), path(&amp;#39;api/getEvaluateUser/&amp;#39;, myapp.views.get_evaluate_user), path(&amp;#39;api/evaluateUser/&amp;#39;, myapp.views.evaluate_user), path(&amp;#39;api/deleteEvaluateUser/&amp;#39;, myapp.views.delete_evaluate_user), path(&amp;#39;api/setOrders/&amp;#39;, myapp.views.set_orders), path(&amp;#39;api/unStar/&amp;#39;, myapp.views.un_star), path(&amp;#39;api/setStar/&amp;#39;, myapp.views.set_star), path(&amp;#39;api/finishOrder/&amp;#39;, myapp.views.finish_order), path(&amp;#39;api/takeOrder/&amp;#39;, myapp.views.take_order), path(&amp;#39;api/getAllOrders/&amp;#39;, myapp.views.get_all_orders), path(&amp;#39;api/getTopFoodList/&amp;#39;, myapp.views.get_top_food_list), path(&amp;#39;api/androidGetUserFoodEvaluate/&amp;#39;, myapp.views.android_get_user_food_evaluate), path(&amp;#39;api/androidGetFoodEvaluateScore/&amp;#39;, myapp.views.android_get_food_evaluate_score), 深度学习 我们根据订单的配送时间是星期几，餐厅，配送地等信息通过深度学习预测订单送达时间 我们通过手动构造数据集，训练了一个模型存到服务器，并在每次前端发送新的请求后对订单进行预计送达时间的计算。
def predict(model,dl): model.eval() with torch.</description>
      <content:encoded><![CDATA[<h1 id="takeawaydelivery-后端实现">TakeawayDelivery 后端实现</h1>
<h2 id="开发环境">开发环境</h2>
<ul>
<li>Python</li>
<li>Django</li>
<li>PyTorch</li>
<li>MySQL</li>
</ul>
<h2 id="云端部署">云端部署</h2>
<p>我们将后端Django和数据库均部署在服务器上，并且进行了域名解析，可以通过delivery.mcatk.com直接访问后端，前端可以在任意情况下发送请求。</p>
<p>服务器供应：腾讯云&amp;阿里云
服务器系统：CentOS 7
数据库：MySQL 5
解释器：Anaconda 3</p>
<h2 id="数据库结构">数据库结构</h2>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/SRvqwx.png" alt="数据库结构"  />
</p>
<h2 id="后端实现接口">后端实现接口</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/login/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">login</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/register/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">register</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/getInformation/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">get_information</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/changeInformation/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">change_information</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/changePassword/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">change_password</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/getStores/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">get_stores</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/getStoreInformation/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">get_store_information</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/deleteUser/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">delete_user</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/getEvaluateFood/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">get_evaluate_food</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/evaluateFood/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">evaluate_food</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/deleteEvaluateFood/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">delete_evaluate_food</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/getEvaluateUser/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">get_evaluate_user</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/evaluateUser/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">evaluate_user</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/deleteEvaluateUser/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">delete_evaluate_user</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/setOrders/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">set_orders</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/unStar/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">un_star</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/setStar/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">set_star</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/finishOrder/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">finish_order</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/takeOrder/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">take_order</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/getAllOrders/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">get_all_orders</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/getTopFoodList/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">get_top_food_list</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/androidGetUserFoodEvaluate/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">android_get_user_food_evaluate</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl"><span class="n">path</span><span class="p">(</span><span class="s1">&#39;api/androidGetFoodEvaluateScore/&#39;</span><span class="p">,</span> <span class="n">myapp</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">android_get_food_evaluate_score</span><span class="p">),</span>
</span></span></code></pre></div><h2 id="深度学习">深度学习</h2>
<p>我们根据订单的配送时间是星期几，餐厅，配送地等信息通过深度学习预测订单送达时间
我们通过手动构造数据集，训练了一个模型存到服务器，并在每次前端发送新的请求后对订单进行预计送达时间的计算。</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/wzVMGd.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">predict</span><span class="p">(</span><span class="n">model</span><span class="p">,</span><span class="n">dl</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>  
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>  
</span></span><span class="line"><span class="cl">        <span class="n">result</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">FloatTensor</span><span class="p">(</span><span class="n">dl</span><span class="p">))</span>  
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">item</span><span class="p">()</span><span class="o">*</span><span class="mf">65.0</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="orm">ORM</h2>
<p>我们通过Django ORM生成了数据表对象的models，方便了数据库的操作，例如</p>
<p>Food</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/C1MOdS.png" alt="Food"  />
</p>
<p>实现为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Food</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">    <span class="n">food_id</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">AutoField</span><span class="p">(</span><span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">    <span class="n">food_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">    <span class="n">food_price</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DecimalField</span><span class="p">(</span><span class="n">max_digits</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">decimal_places</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">    <span class="n">food_url</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">500</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">    <span class="n">food_type</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">    <span class="n">store</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="s1">&#39;Store&#39;</span><span class="p">,</span> <span class="n">models</span><span class="o">.</span><span class="n">DO_NOTHING</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>  
</span></span><span class="line"><span class="cl">        <span class="n">managed</span> <span class="o">=</span> <span class="kc">False</span>  
</span></span><span class="line"><span class="cl"> <span class="n">db_table</span> <span class="o">=</span> <span class="s1">&#39;food&#39;</span>
</span></span></code></pre></div><h2 id="实现样例">实现样例</h2>
<ol>
<li>【增】用户注册</li>
</ol>
<p>前端发送post请求
URL: <code>http://delivery.mcatk.com/api/register/</code>
PARA:  <code>userName</code>  <code>userPassword</code> <code>userNickname</code> <code>userTel</code> <code>userAddress</code></p>
<p>后端接到请求，执行<code>register</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">register</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s2">&#34;POST&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">data_json</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">new_name</span> <span class="o">=</span> <span class="n">data_json</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;userName&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">new_pwd</span> <span class="o">=</span> <span class="n">make_password</span><span class="p">(</span><span class="n">data_json</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;userPassword&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">new_nickname</span> <span class="o">=</span> <span class="n">data_json</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;userNickname&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">new_tel</span> <span class="o">=</span> <span class="n">data_json</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;userTel&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">new_address</span> <span class="o">=</span> <span class="n">data_json</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;userAddress&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">new_name</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">JsonResponse</span><span class="p">({</span><span class="s2">&#34;success&#34;</span><span class="p">:</span> <span class="kc">False</span><span class="p">,</span> <span class="s2">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;未输入&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">space</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">user_name</span><span class="o">=</span><span class="n">new_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">space</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">JsonResponse</span><span class="p">({</span><span class="s2">&#34;success&#34;</span><span class="p">:</span> <span class="kc">False</span><span class="p">,</span> <span class="s2">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;用户名已存在&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">new_user</span> <span class="o">=</span> <span class="n">User</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="n">new_user</span><span class="o">.</span><span class="n">user_name</span> <span class="o">=</span> <span class="n">new_name</span>
</span></span><span class="line"><span class="cl">                <span class="n">new_user</span><span class="o">.</span><span class="n">user_password</span> <span class="o">=</span> <span class="n">new_pwd</span>
</span></span><span class="line"><span class="cl">                <span class="n">new_user</span><span class="o">.</span><span class="n">user_nickname</span> <span class="o">=</span> <span class="n">new_nickname</span>
</span></span><span class="line"><span class="cl">                <span class="n">new_user</span><span class="o">.</span><span class="n">user_tel</span> <span class="o">=</span> <span class="n">new_tel</span>
</span></span><span class="line"><span class="cl">                <span class="n">new_user</span><span class="o">.</span><span class="n">user_address</span> <span class="o">=</span> <span class="n">new_address</span>
</span></span><span class="line"><span class="cl">                <span class="n">new_user</span><span class="o">.</span><span class="n">user_icon_url</span> <span class="o">=</span> <span class="s2">&#34;https://img0.baidu.com/it/u=3730772664,138405132&amp;fm=26&amp;fmt=auto&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="n">new_user</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">JsonResponse</span><span class="p">({</span><span class="s2">&#34;success&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span> <span class="s2">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;注册成功&#34;</span><span class="p">,</span> <span class="s2">&#34;userID&#34;</span><span class="p">:</span> <span class="n">new_user</span><span class="o">.</span><span class="n">user_id</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">JsonResponse</span><span class="p">({</span><span class="s2">&#34;success&#34;</span><span class="p">:</span> <span class="kc">False</span><span class="p">,</span> <span class="s2">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;请求异常&#34;</span><span class="p">})</span>
</span></span></code></pre></div><p>先检查是否有重名用户，若无，通过Django ORM 将新生成的User导入数据库。</p>
<ol start="2">
<li>【删】用户注销</li>
</ol>
<p>前端发送post请求
URL: <code>http://delivery.mcatk.com/api/deleteUser/</code>
PARA:  <code>userID</code>  <code>userPassword</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">delete_user</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s2">&#34;POST&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">data_json</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">user_id</span> <span class="o">=</span> <span class="n">data_json</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;userID&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">password</span> <span class="o">=</span> <span class="n">data_json</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;userPassword&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">user_id</span><span class="o">=</span><span class="n">user_id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">check_password</span><span class="p">(</span><span class="n">password</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">user_password</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">user</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">JsonResponse</span><span class="p">({</span><span class="s2">&#34;success&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span> <span class="s2">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;注销成功&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">JsonResponse</span><span class="p">({</span><span class="s2">&#34;success&#34;</span><span class="p">:</span> <span class="kc">False</span><span class="p">,</span> <span class="s2">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;密码错误&#34;</span><span class="p">})</span>
</span></span></code></pre></div><p>检查密码是否正确，若正确则注销用户</p>
<ol start="3">
<li>【改】完成订单</li>
</ol>
<p>以完成订单为例</p>
<p>前端发送post请求
URL: <code>http://delivery.mcatk.com/api/finishOrder/</code>
PARA: <code>orderID</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">finish_order</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s2">&#34;POST&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">data_json</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">order_id</span> <span class="o">=</span> <span class="n">data_json</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;orderID&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">Order</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">order_id</span><span class="o">=</span><span class="n">order_id</span><span class="p">)</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">order_completed</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">JsonResponse</span><span class="p">({</span><span class="s2">&#34;success&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                             <span class="s2">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;配送完成&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                             <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">JsonResponse</span><span class="p">({</span><span class="s2">&#34;success&#34;</span><span class="p">:</span> <span class="kc">False</span><span class="p">,</span> <span class="s2">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;请求异常&#34;</span><span class="p">})</span>
</span></span></code></pre></div><ol start="4">
<li>用户信息查询</li>
</ol>
<p>用前端向后端发送获取用户全部信息的API为例</p>
<p>前端发送post请求
URL: <code>http://delivery.mcatk.com/api/getInformation/</code>
PARA: <code>userID</code></p>
<p>后端接到请求，执行<code>get_information</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_information</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s2">&#34;POST&#34;</span><span class="p">:</span>  
</span></span><span class="line"><span class="cl">        <span class="n">data_json</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">        <span class="n">user_id</span> <span class="o">=</span> <span class="n">data_json</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;userID&#34;</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">        <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">user_id</span><span class="o">=</span><span class="n">user_id</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">        <span class="n">orders1</span> <span class="o">=</span> <span class="n">get_orders</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="kc">False</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">        <span class="n">orders2</span> <span class="o">=</span> <span class="n">get_orders</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="kc">True</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">        <span class="n">stars</span> <span class="o">=</span> <span class="n">get_stars</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">JsonResponse</span><span class="p">({</span><span class="s2">&#34;success&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">							 <span class="s2">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;查询成功&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">							 <span class="s2">&#34;userName&#34;</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">user_name</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">							 <span class="s2">&#34;userNickName&#34;</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">user_nickname</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">							 <span class="s2">&#34;userAddress&#34;</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">user_address</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">							 <span class="s2">&#34;userTel&#34;</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">user_tel</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">							 <span class="s2">&#34;userOrders&#34;</span><span class="p">:</span> <span class="n">orders1</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">							 <span class="s2">&#34;userDeliveryOrders&#34;</span><span class="p">:</span> <span class="n">orders2</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">							 <span class="s2">&#34;userStars&#34;</span><span class="p">:</span> <span class="n">stars</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">							 <span class="s2">&#34;userIconUrl&#34;</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">user_icon_url</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">							 <span class="p">})</span>  
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>  
</span></span><span class="line"><span class="cl">        <span class="n">JsonResponse</span><span class="p">({</span><span class="s2">&#34;success&#34;</span><span class="p">:</span> <span class="kc">False</span><span class="p">,</span> <span class="s2">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;请求异常&#34;</span><span class="p">})</span>
</span></span></code></pre></div><p>此过程还会调用获取用户订单和用户收藏以及机器学习的函数，不具体展出</p>
<p>随后，前端可以得到类似如下的返回</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nt">&#34;success&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="nt">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;查询成功&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="nt">&#34;userName&#34;</span><span class="p">:</span> <span class="s2">&#34;zzh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="nt">&#34;userNickName&#34;</span><span class="p">:</span> <span class="s2">&#34;粥童帆&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="nt">&#34;userAddress&#34;</span><span class="p">:</span> <span class="s2">&#34;学院路-15公寓&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="nt">&#34;userTel&#34;</span><span class="p">:</span> <span class="s2">&#34;18800130501&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="nt">&#34;userOrders&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl"><span class="err">...</span>
</span></span><span class="line"><span class="cl"><span class="err">}</span>
</span></span></code></pre></div><p>这样我们就完成了前后端的通信</p>
<h2 id="密码加密">密码加密</h2>
<p>我们对数据库的密码进行了加密，通过Django的 <code>make_password()</code> 和 <code>check_password()</code> 函数在传入和验证密码时候进行了加密解密操作。</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/lZOUAk.png" alt="数据库中加密的密码"  />
</p>
<p>同时，由于我们的系统起初上线时密码为明文存储，我们会在老用户第一次登陆时通过其验证并为其加密。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">user_password</span> <span class="o">==</span> <span class="n">password</span><span class="p">:</span>  
</span></span><span class="line"><span class="cl">    <span class="n">user</span><span class="o">.</span><span class="n">user_password</span> <span class="o">=</span> <span class="n">make_password</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">    <span class="n">user</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>  
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">JsonResponse</span><span class="p">({</span><span class="s2">&#34;success&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span> <span class="s2">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;登录成功，已为您的密码加密&#34;</span><span class="p">,</span> <span class="s2">&#34;userID&#34;</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">user_id</span><span class="p">})</span>  
</span></span><span class="line"><span class="cl"><span class="k">elif</span> <span class="n">check_password</span><span class="p">(</span><span class="n">password</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">user_password</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">JsonResponse</span><span class="p">({</span><span class="s2">&#34;success&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span> <span class="s2">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;登录成功&#34;</span><span class="p">,</span> <span class="s2">&#34;userID&#34;</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">user_id</span><span class="p">})</span>
</span></span></code></pre></div><h2 id="设计细节">设计细节</h2>
<h3 id="热菜推荐">热菜推荐</h3>
<p>我们通过MySQL的特性，统计出在订单-菜品关系表中出现最多的菜品，向用户推荐热门菜品。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">order_foods</span> <span class="o">=</span> <span class="n">OrderFood</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">values</span><span class="p">(</span><span class="s1">&#39;food_id&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">annotate</span><span class="p">(</span><span class="nb">sum</span><span class="o">=</span><span class="n">Sum</span><span class="p">(</span><span class="s1">&#39;food_num&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s1">&#39;-sum&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">order_food</span> <span class="ow">in</span> <span class="n">order_foods</span><span class="p">:</span>  
</span></span><span class="line"><span class="cl">    <span class="n">food</span> <span class="o">=</span> <span class="n">Food</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">food_id</span><span class="o">=</span><span class="n">order_food</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;food_id&#39;</span><span class="p">))</span>  
</span></span><span class="line"><span class="cl">    <span class="n">food_json</span> <span class="o">=</span> <span class="n">get_food_json</span><span class="p">(</span><span class="n">food</span><span class="p">,</span> <span class="kc">True</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">    <span class="n">food_json</span><span class="p">[</span><span class="s2">&#34;sum&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">order_food</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;sum&#39;</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">    <span class="n">food_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">food_json</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="按时间展示">按时间展示</h3>
<p>我们在展示订单，评论等时候会按照时间先后展示，更加人性化</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">food_evaluates</span> <span class="o">=</span> <span class="n">FoodEvaluate</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">food_id</span><span class="o">=</span><span class="n">food_id</span><span class="p">)</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s2">&#34;-food_evaluate_date&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="下单送单">下单&amp;送单</h3>
<p>由于我们的开发APP的初衷就是任何用户都可以下单，也可以送单，因此我们提供了返回自己下的单和自己接的单，还有等待接的单的API，他们都根据你的角色不同，返回不同的的结构类型，例如，当你查看自己的单，数据重点在于你点的菜品和价格等，而当你查看你可以接的单时，数据的重点在于这个订单是从哪里送到哪里等等，为此我们提供了各式各样的查询API。</p>
<h2 id="数据完整性">数据完整性</h2>
<p>我们为所有存在关系的对象增加了外键约束，并且加入了 MySQL  <code>on delete cascade</code> 的删除规则，在对象删除时删除与其有外键约束的对象。</p>
<p>例如，当我们删除一个用户的时候，他的全部订单，订单中的菜品关系，用户收藏等将被一并删除，不会出现数据异常。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>IoTMonitor</title>
      <link>https://zzhgo.com/posts/projects/iotmonitor/</link>
      <pubDate>Sun, 28 Nov 2021 02:54:12 +0000</pubDate>
      
      <guid>https://zzhgo.com/posts/projects/iotmonitor/</guid>
      <description>IoTMonitor 用于展示IoT课程开发板的相关信息并进行控制
可以通过调用我们部署的服务器api及时获取开发板的温湿度数据，也可以发送开关电机的指令，并且可以设置温湿度超过某阈值后报警，同时有历史记录来提供任意时间段内好看的温湿度曲线
图片 简介 主页面 分为三个部分：设备状态，历史记录，设置
UI整体使用卡片式扁平设计
设备状态 刷新按钮和更新温湿度数据，温湿度可以显示此时设备的温湿度传感器信息，打开电机和关闭电机功能用于控制控制板马达
其中，温湿度会每秒自动进行更新，2位小数点保留
历史记录 通过DatePicker选择起止时间，再点击获取，即可得到此段时间内的温湿度曲线，触摸曲线还可以动态显示任意一点的数值（此处使用了[[SwiftUI 图表库 ChartView]]库）
默认显示2天前到现在的曲线，第一次打开app时会同步一次
设置 在设置页面，通过选择器选择阈值后点击保存，当温度高于此阈值时，开发板电机将会转动
同时，打开app后每次阈值的设置会被记录，以便查看设置情况
功能 实时显示开发板传感器温湿度 实时控制开发板电机马达转动与否 获取任意时间段开发板传感器温湿度历史曲线 通过设置过热阈值，当温度超过此值，进行报警 后台实时更新 实现 该app主要通过HTTP GET和POST请求像我们的服务器后端发送请求，后端通过电信平台的api调用来发送相关指令，电信平台再把指令下达到开发板，来实现app与开发板的交互
该app的UI部分复用项目Memo的代码</description>
      <content:encoded><![CDATA[<h1 id="iotmonitor">IoTMonitor</h1>
<p>用于展示IoT课程开发板的相关信息并进行控制</p>
<p>可以通过调用我们部署的服务器api及时获取开发板的温湿度数据，也可以发送开关电机的指令，并且可以设置温湿度超过某阈值后报警，同时有历史记录来提供任意时间段内好看的温湿度曲线</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/IoTMonitor%e5%b1%95%e7%a4%bagif.gif" alt=""  />
</p>
<h2 id="图片">图片</h2>
<p><img loading="lazy" src="https://pic.mcac.cc/202212310106944.png" alt=""  />
</p>
<h2 id="简介">简介</h2>
<h3 id="主页面">主页面</h3>
<p>分为三个部分：设备状态，历史记录，设置</p>
<p>UI整体使用卡片式扁平设计</p>
<h4 id="设备状态">设备状态</h4>
<p>刷新按钮和更新温湿度数据，温湿度可以显示此时设备的温湿度传感器信息，打开电机和关闭电机功能用于控制控制板马达</p>
<p>其中，温湿度会每秒自动进行更新，2位小数点保留</p>
<p><img loading="lazy" src="https://pic.mcac.cc/202212310106548.png" alt=""  />
</p>
<h4 id="历史记录">历史记录</h4>
<p>通过DatePicker选择起止时间，再点击获取，即可得到此段时间内的温湿度曲线，触摸曲线还可以动态显示任意一点的数值（此处使用了[[SwiftUI 图表库 ChartView]]库）</p>
<p>默认显示2天前到现在的曲线，第一次打开app时会同步一次</p>
<p><img loading="lazy" src="https://pic.mcac.cc/202212310107635.png" alt=""  />
</p>
<h4 id="设置">设置</h4>
<p>在设置页面，通过选择器选择阈值后点击保存，当温度高于此阈值时，开发板电机将会转动</p>
<p>同时，打开app后每次阈值的设置会被记录，以便查看设置情况</p>
<p><img loading="lazy" src="https://pic.mcac.cc/202212310107745.png" alt=""  />
</p>
<h2 id="功能">功能</h2>
<ul>
<li>实时显示开发板传感器温湿度</li>
<li>实时控制开发板电机马达转动与否</li>
<li>获取任意时间段开发板传感器温湿度历史曲线</li>
<li>通过设置过热阈值，当温度超过此值，进行报警</li>
<li>后台实时更新</li>
</ul>
<h2 id="实现">实现</h2>
<p>该app主要通过HTTP GET和POST请求像我们的服务器后端发送请求，后端通过电信平台的api调用来发送相关指令，电信平台再把指令下达到开发板，来实现app与开发板的交互</p>
<p>该app的UI部分复用项目<a href="https://github.com/acsoto/Memo">Memo</a>的代码</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Alxa_Compiler(SysY to PCODE)</title>
      <link>https://zzhgo.com/posts/projects/alxa_compiler/</link>
      <pubDate>Tue, 16 Nov 2021 16:29:00 +0000</pubDate>
      
      <guid>https://zzhgo.com/posts/projects/alxa_compiler/</guid>
      <description>Lexical analysis Before Code Requriement: read testfile.txt, parse every char to word and print them. At the same time, memorize type, content and line number of each word.
File reading Read by line, scan every char of every string and analyse.
while ((s = bf.readLine()) != null) { ... } Analyse When i get the key word, enter the next analyst.
while ((c = getChar()) != null) { if (c == &amp;#39; &amp;#39; || c == &amp;#39;\r&amp;#39; || c == &amp;#39;\t&amp;#39;) { continue; } else if (c == &amp;#39;+&amp;#39; || c == &amp;#39;-&amp;#39; || c == &amp;#39;*&amp;#39; || c == &amp;#39;%&amp;#39;) { words.</description>
      <content:encoded><![CDATA[<h2 id="lexical-analysis">Lexical analysis</h2>
<h3 id="before-code">Before Code</h3>
<p>Requriement:  read <code>testfile.txt</code>, parse every char to word and print them. At the same time, memorize type, content and line number of  each word.</p>
<h4 id="file-reading">File reading</h4>
<p>Read by line, scan every char of every string and analyse.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">while</span> <span class="o">((</span><span class="n">s</span> <span class="o">=</span> <span class="n">bf</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h4 id="analyse">Analyse</h4>
<p>When i get the key word, enter the next analyst.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">while</span> <span class="o">((</span><span class="n">c</span> <span class="o">=</span> <span class="n">getChar</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;\r&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;\t&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">continue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;+&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;*&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;%&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">words</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Word</span><span class="o">(</span><span class="n">c</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;/&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">analyseSlash</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;(&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;)&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;[&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;]&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;{&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;}&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">words</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Word</span><span class="o">(</span><span class="n">c</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;&gt;&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;&lt;&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;=&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;!&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">analyseRelation</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;,&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;;&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">words</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Word</span><span class="o">(</span><span class="n">c</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;&#34;&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">analyseCitation</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;&amp;&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;|&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">analyseLogic</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">analyseDigit</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">Character</span><span class="o">.</span><span class="na">isLetter</span><span class="o">(</span><span class="n">c</span><span class="o">)</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;_&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">analyseLetter</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h5 id="common">Common</h5>
<p>For example, when I get &lsquo;+&rsquo;, I directly new a Word typify the &ldquo;PLUS&rdquo;.</p>
<h5 id="function">Function</h5>
<p>For example</p>
<p>When I get <code>&lt;</code> , enter function<code>analyseRelation</code> read one char more. If it is<code>=</code>, analyze <code>LEQ</code>&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;&lt;&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">c</span> <span class="o">=</span> <span class="n">getChar</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;=&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">words</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Word</span><span class="o">(</span><span class="s">&#34;&lt;=&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">unGetChar</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">words</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Word</span><span class="o">(</span><span class="s">&#34;&lt;&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span></code></pre></div><p><code>analyseLogic</code> is as the same.</p>
<h5 id="digit-and-letter">Digit and Letter</h5>
<p>Digit: When I get a digit, it means I will scan a serial of some digits and turn them into a Word typify &ldquo;INTCON&rdquo;.</p>
<p>Letter: When I get a letter, it means I will scan a string about letter or digit. It maybe a &ldquo;IDENFR&rdquo; or &ldquo;STRCON&rdquo;, which depends on whether it is in key map or not.</p>
<h4 id="word">Word</h4>
<p>class Word:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Word</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">identification</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">content</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">type</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Capsulate the initial function, I only need to <code>new Word(...)</code> in the main processor, which will create the corresponding word.</p>
<p>For example</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Word</span><span class="o">(</span><span class="kt">char</span> <span class="n">identification</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">identification</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">identification</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">type</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KeyWordMap</span><span class="o">().</span><span class="na">getType</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">identification</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">identification</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><p>As for KeyWordMap, it is a HashMap, mapping the string of word and its type.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">KeyWordMap</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">keyWords</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">keyWords</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;main&#34;</span><span class="o">,</span> <span class="s">&#34;MAINTK&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">keyWords</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;const&#34;</span><span class="o">,</span> <span class="s">&#34;CONSTTK&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">keyWords</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;int&#34;</span><span class="o">,</span> <span class="s">&#34;INTTK&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">...</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span></code></pre></div><h3 id="after-code">After Code</h3>
<h4 id="file-reading-1">File reading</h4>
<p>Read file by line is not convenient for preread and undo, so I read the file into a single String at first.</p>
<p>The method is read by line, add <code>\n</code> after every line and scan every char. When I get <code>\n</code>, <code>lineNum++</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="nf">transferFileToCode</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">BufferedReader</span> <span class="n">bf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="n">reader</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">StringBuffer</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">((</span><span class="n">s</span> <span class="o">=</span> <span class="n">bf</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">s</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;\n&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">buffer</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><h4 id="analyse-1">Analyse</h4>
<p>About analyst, it is different from what before coding.</p>
<p>First, I need analyze word one by one, so I add global variety <code>index</code> to memorize where is the pointer.</p>
<p>Besides, I met the situation that I need read one more or undo, so I  encapsulate the function <code>ungetChar</code> and <code>getChar</code>, which will be convenient for me to analyze.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Character</span> <span class="nf">getChar</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="n">code</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">code</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;\n&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">lineNum</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">index</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">c</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">unGetChar</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">index</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">code</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;\n&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">lineNum</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><h5 id="slash">Slash</h5>
<ol>
<li><code>//</code> : When it comes to <code>\n</code> , stop.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">do</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">c</span> <span class="o">=</span> <span class="n">getChar</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;\n&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 判断为//注释，结束分析
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span></code></pre></div><ol start="2">
<li><code>/* */</code>: Get char until <code>*/</code> appears</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">do</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">c</span> <span class="o">=</span> <span class="n">getChar</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;*&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">c</span> <span class="o">=</span> <span class="n">getChar</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;/&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 判断为/* */注释，直接结束分析
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">unGetChar</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span></code></pre></div><h2 id="grammatical-analysis">Grammatical analysis</h2>
<p>Requirement: Based on the words identified by the lexical analysis program, identify various grammatical elements according to the grammatical rules. Recursive descent method is used to analyze the grammatical components defined in the grammar.</p>
<h3 id="before-code-1">Before Code</h3>
<h4 id="data-reading">Data Reading</h4>
<p>Like the lexical analyst, I prepared function  <code>getWord</code> <code>getNextWord</code> and so on. At the same time, there is a global variety <code>(Word) curWord</code> to display which word it is when I read <code>ArrayList&lt;Word&gt; words </code> from lexical analyst one by one.</p>
<p>My analyst tragedy is as follows:</p>
<p>To normal rule: I keep getting words and analyze them</p>
<p>To expression rule: I scan the whole expression first, which is implemented by function <code>getExp</code>. Then I divide the expression and use method recursive descent to analyze them.</p>
<p><code>getExp</code> like</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;</span> <span class="nf">getExp</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;</span> <span class="n">exp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">word</span> <span class="n">is</span> <span class="n">symbol</span> <span class="n">of</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">...</span>
</span></span><span class="line"><span class="cl">            <span class="n">getWordWithoutAddToGrammar</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">exp</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">curWord</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">word</span> <span class="o">=</span> <span class="n">getNextWord</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">exp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><h4 id="recursive-descent">recursive descent</h4>
<p>According to Grammatical Rules, code function for every term of rule.</p>
<p>Main idea: read a word, check what it symbolize and enter the next analyzing function.</p>
<p>For example:</p>
<p>to</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">CompUnit</span> <span class="err">→</span> <span class="p">{</span><span class="n">Decl</span><span class="p">}</span> <span class="p">{</span><span class="n">FuncDef</span><span class="p">}</span> <span class="n">MainFuncDef</span> <span class="c1">// 1.是否存在Decl 2.是否存在 FuncDef
</span></span></span></code></pre></div><p>I analyze like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">analyseCompUnit</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Word</span> <span class="n">word</span> <span class="o">=</span> <span class="n">getNextWord</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;CONSTTK&#34;</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">word</span><span class="o">.</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;INTTK&#34;</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">getNext2Word</span><span class="o">().</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;IDENFR&#34;</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">getNext3Word</span><span class="o">().</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;LPARENT&#34;</span><span class="o">)))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">analyseDecl</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">word</span> <span class="o">=</span> <span class="n">getNextWord</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;VOIDTK&#34;</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;INTTK&#34;</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">getNext2Word</span><span class="o">().</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;MAINTK&#34;</span><span class="o">))))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">analyseFuncDef</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">word</span> <span class="o">=</span> <span class="n">getNextWord</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;INTTK&#34;</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">getNext2Word</span><span class="o">().</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;MAINTK&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">analyseMainFuncDef</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">error</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">grammar</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;&lt;CompUnit&gt;&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>grammar is used for memorize output of lexical analyst and grammar analyst list.</p>
<h4 id="left-recursion">left recursion</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="err">加减表达式</span> <span class="n">AddExp</span> <span class="err">→</span> <span class="n">MulExp</span> <span class="o">|</span> <span class="n">AddExp</span> <span class="o">(</span><span class="sc">&#39;+&#39;</span> <span class="o">|</span> <span class="sc">&#39;−&#39;</span><span class="o">)</span> <span class="n">MulExp</span> <span class="c1">// 1.MulExp 2.+ 需覆盖 3.- 需覆盖
</span></span></span></code></pre></div><p>Check if the exp has &lsquo;+&rsquo; or &lsquo;-&rsquo;. If it has, separate the exp to AddExp and  MulExp. Then analyze them separately.</p>
<h3 id="after-code-1">After Code</h3>
<h4 id="left-recursion-1">left recursion</h4>
<p>The method used before is not perfect for recursive descent. So I changed my rewrite way.</p>
<p>to</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="err">加减表达式</span> <span class="n">AddExp</span> <span class="err">→</span> <span class="n">MulExp</span> <span class="o">|</span> <span class="nf">AddExp</span> <span class="p">(</span><span class="sc">&#39;+&#39;</span> <span class="o">|</span> <span class="sc">&#39;−&#39;</span><span class="p">)</span> <span class="n">MulExp</span> <span class="c1">// 1.MulExp 2.+ 需覆盖 3.- 需覆盖
</span></span></span></code></pre></div><p>Rewrite it like</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">AddExp</span> <span class="err">→</span> <span class="nf">MulExp</span> <span class="p">(</span><span class="sc">&#39;+&#39;</span> <span class="o">|</span> <span class="sc">&#39;−&#39;</span><span class="p">)</span> <span class="nf">MulExp</span>  <span class="p">(</span><span class="sc">&#39;+&#39;</span> <span class="o">|</span> <span class="sc">&#39;−&#39;</span><span class="p">)</span> <span class="n">MulExp</span> <span class="p">...</span>
</span></span></code></pre></div><p>Code like</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">analyseMulExp</span><span class="o">(</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;</span> <span class="n">exp</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Exps</span> <span class="n">exps</span> <span class="o">=</span> <span class="n">divideExp</span><span class="o">(</span><span class="n">exp</span><span class="o">,</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;MULT&#34;</span><span class="o">,</span> <span class="s">&#34;DIV&#34;</span><span class="o">,</span> <span class="s">&#34;MOD&#34;</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="o">(</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;</span> <span class="n">exp1</span> <span class="o">:</span> <span class="n">exps</span><span class="o">.</span><span class="na">getWords</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">analyseUnaryExp</span><span class="o">(</span><span class="n">exp1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">grammar</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;&lt;MulExp&gt;&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">exps</span><span class="o">.</span><span class="na">getSymbols</span><span class="o">().</span><span class="na">size</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">grammar</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">exps</span><span class="o">.</span><span class="na">getSymbols</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">++).</span><span class="na">toString</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Function <code>divideExp</code> is used for divide the whole exp passed by <code>getExp</code> or the pre function.</p>
<p><code>divideExp</code>:</p>
<p>In: orignal: <code>exp</code> stop symbol:  <code>symbol</code></p>
<p>Out: List of divided exp and symbol.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="n">Exps</span> <span class="nf">divideExp</span><span class="o">(</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;</span> <span class="n">exp</span><span class="o">,</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">symbol</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;&gt;</span> <span class="n">exps</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">  <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;</span> <span class="n">exp1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">  <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;</span> <span class="n">symbols</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">  <span class="kt">boolean</span> <span class="n">unaryFlag</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">flag1</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">flag2</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">exp</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Word</span> <span class="n">word</span> <span class="o">=</span> <span class="n">exp</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;LPARENT&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">flag1</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;RPARENT&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">flag1</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;LBRACK&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">flag2</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;RBRACK&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">flag2</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">symbol</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">getType</span><span class="o">())</span> <span class="o">&amp;&amp;</span> <span class="n">flag1</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">flag2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">//UnaryOp
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">if</span> <span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">typeOfUnary</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(!</span><span class="n">unaryFlag</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">exp1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">          <span class="k">continue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">exps</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">exp1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">symbols</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">exp1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">exp1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">unaryFlag</span> <span class="o">=</span> <span class="n">word</span><span class="o">.</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;IDENFR&#34;</span><span class="o">)</span> <span class="o">||</span> <span class="n">word</span><span class="o">.</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;RPARENT&#34;</span><span class="o">)</span> <span class="o">||</span> <span class="n">word</span><span class="o">.</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;INTCON&#34;</span><span class="o">)</span> <span class="o">||</span> <span class="n">word</span><span class="o">.</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;RBRACK&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">exps</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">exp1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">new</span> <span class="n">Exps</span><span class="o">(</span><span class="n">exps</span><span class="o">,</span> <span class="n">symbols</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Exps</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Exps</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;&gt;</span> <span class="n">words</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;</span> <span class="n">symbols</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h4 id="other-bugs">other bugs</h4>
<p>Most bugs are produced by function <code>getExp</code> and <code>divideExp</code> because of some situations are ignored. So I always get something like index out of range&hellip;</p>
<p>So I changed some symbol of stop getting expression and modify the rules to divide or not the expression and so on.</p>
<h2 id="error-handling">Error handling</h2>
<p>Official errors defination</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto/202112301422547.png" alt=""  />
</p>
<h3 id="before-code-2">Before Code</h3>
<h4 id="create-the-symbol-table">Create the symbol table</h4>
<p>Symbol class</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Symbol</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">type</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">intType</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">content</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">area</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Type means the type of the symbol.</p>
<p>IntType is an integer. If it&rsquo;s 0, the symbol is int. if it&rsquo;s 1, the symbol is int[],  if it&rsquo;s 2, the symbol is int[] []&hellip;</p>
<p>Content is its content.</p>
<p>Area is where is it.</p>
<p>I create a HashMap of Symbols, memorizing symbols created in each area.</p>
<p>When I enter a new area, area++. When I leave an area, area&ndash;, with the corresponding Symbols are destroyed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Symbols</span><span class="o">&gt;</span> <span class="n">symbols</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Function</span><span class="o">&gt;</span> <span class="n">functions</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Error</span><span class="o">&gt;</span> <span class="n">errors</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">area</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">needReturn</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">whileFlag</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span></code></pre></div><p><code>needReturn</code> means if the current function need to return.</p>
<p><code>whileFlag </code> means if the current code block is in while circle.</p>
<h4 id="errors">Errors</h4>
<h5 id="a"><strong>a</strong></h5>
<p>Just check format</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isFormatIllegal</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">content</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">content</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(!</span><span class="n">isLegal</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;%&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">content</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;d&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">continue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;\\&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">content</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">!=</span> <span class="sc">&#39;n&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isLegal</span><span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>  
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">c</span> <span class="o">==</span> <span class="mi">32</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="mi">33</span> <span class="o">||</span> <span class="o">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="mi">40</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="mi">126</span><span class="o">);</span> <span class="c1">//offical defination
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h5 id="b-c"><strong>b c</strong></h5>
<p>B: Every time I get an identity, check if there is the same symbol has been defined in this area.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">hasSymbolInThisArea</span><span class="o">(</span><span class="n">Word</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">symbols</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">area</span><span class="o">).</span><span class="na">hasSymbol</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> 
</span></span></code></pre></div><p>C: Check all area. If the symbol has been defined. Functions are as the same.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">hasSymbol</span><span class="o">(</span><span class="n">Word</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Symbols</span> <span class="n">s</span> <span class="o">:</span> <span class="n">symbols</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">hasSymbol</span><span class="o">(</span><span class="n">word</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><h5 id="d-e"><strong>d e</strong></h5>
<p>To check if the function parameters are matched, I memorize parameters of every function and when I met a function call, I will scan the function call parameters and match them. I prepare a function to do this. Finally I found I need to use recursive descent again, so I add the check procedure to the recursive descent of the grammatical analyst. Please check the <code>After Code/Error d and e</code></p>
<h5 id="f-g">f g</h5>
<p>There is a global variety <code>needReturn</code> used to display if the current function need return. if it does but there is no return in the end of the code block, or if it doesn&rsquo;t but there is return, the error will be memorized.</p>
<h5 id="h"><strong>h</strong></h5>
<p>Just check if it is a const.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">if</span> <span class="o">(</span><span class="n">isConst</span><span class="o">(</span><span class="n">word</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">error</span><span class="o">(</span><span class="s">&#34;h&#34;</span><span class="o">,</span> <span class="n">word</span><span class="o">.</span><span class="na">getLineNum</span><span class="o">());</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h5 id="i-j-k"><strong>i j k</strong></h5>
<p>Capsulate function about checking missing of the symbol</p>
<p>For example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">checkParent</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">getNextWord</span><span class="o">().</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;RPARENT&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">getWord</span><span class="o">();</span><span class="c1">// )
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">error</span><span class="o">(</span><span class="s">&#34;j&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><h5 id="l"><strong>l</strong></h5>
<p>Count the number of the parameters of string and printf separately and check if they equal.</p>
<h5 id="m"><strong>m</strong></h5>
<p>There is a global variety <code>whileFlag</code> symbolize if the code block is in while circle. If it isn&rsquo;t, any continue and break will produce error.</p>
<h3 id="after-code-2">After Code</h3>
<h4 id="area">Area</h4>
<p>I mark the area++ when I get a block or a function, but it will lead to the situation that when enter a code block of a function, the parameters of the function can&rsquo;t be memorize in the different are with the block of the function. So I changed the rules to mark area++.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">analyseBlock</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">fromFunc</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="o">...</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(!</span><span class="n">fromFunc</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">addArea</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><p>Only when the block is not from the function, the area++.</p>
<h4 id="error-d-and-e">Error d and e</h4>
<p>To check if the function parameters are matched, I set an array for every function.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Function</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">type</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">content</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">returnType</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">paras</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>When I get a function, I memorize its return type and paras.</p>
<p>As for the <code>ArrayList&lt;Integer&gt; paras</code>, it reflects as follows:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Example</th>
<th>Integer</th>
</tr>
</thead>
<tbody>
<tr>
<td>Void</td>
<td></td>
<td>-1</td>
</tr>
<tr>
<td>Int</td>
<td>a</td>
<td>0</td>
</tr>
<tr>
<td>Int[]</td>
<td>a[]</td>
<td>1</td>
</tr>
<tr>
<td>Int[] []</td>
<td>a[] [3]</td>
<td>2</td>
</tr>
</tbody>
</table>
<p>So when I get a function call, I will check the parameter of it with what I have memorized before.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">checkParasMatchRParas</span><span class="o">(</span><span class="n">Word</span> <span class="n">ident</span><span class="o">,</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">paras</span><span class="o">,</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">rparas</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">paras</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">!=</span> <span class="n">rparas</span><span class="o">.</span><span class="na">size</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">error</span><span class="o">(</span><span class="s">&#34;d&#34;</span><span class="o">,</span> <span class="n">ident</span><span class="o">.</span><span class="na">getLineNum</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">paras</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(!</span><span class="n">paras</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">equals</span><span class="o">(</span><span class="n">rparas</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">error</span><span class="o">(</span><span class="s">&#34;e&#34;</span><span class="o">,</span> <span class="n">ident</span><span class="o">.</span><span class="na">getLineNum</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>As for getting the parameters real type, I add the analyst procedure to the recursive descent of the grammatical analyst. Just like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">analyseExp</span><span class="o">(</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;</span> <span class="n">exp</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">intType</span> <span class="o">=</span> <span class="n">analyseAddExp</span><span class="o">(</span><span class="n">exp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">grammar</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;&lt;Exp&gt;&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">intType</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><p>Every recursion will return an <code>intType</code>, which symbolize the final type of the expression.</p>
<p>Because the terms of one expression must be the same type, so I return only one of them.</p>
<p>This is the exit of the recursion. It will return a correct type of the expression to the top of the function.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">analyseLVal</span><span class="o">(</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;</span> <span class="n">exp</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">intType</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">...</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;LBRACK&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">intType</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">                    <span class="o">...</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">         <span class="o">...</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">hasSymbol</span><span class="o">(</span><span class="n">ident</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">getSymbol</span><span class="o">(</span><span class="n">ident</span><span class="o">).</span><span class="na">getIntType</span><span class="o">()</span> <span class="o">-</span> <span class="n">intType</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><h2 id="code-generation">Code generation</h2>
<p>In this part, I chose to generate Pcode.</p>
<p>I designed a type of Pcode which is an Inverse Bolan expression stack and symbol table based virtual code.</p>
<p>At the same time, I designed virtual machine to execute them.</p>
<p>The Pcode virtual machine is an imaginary machine used to run Pcode commands. It consists of: A code area (code), an instruction pointer (EIP), a stack, a var_table, a func_table and a label_table.</p>
<p>In the following passage, I will introduce how Pcode executes first and how to produce Pcode next.</p>
<h3 id="before-code-3">Before Code</h3>
<h4 id="how-does-the-virtual-machine-run">How does the virtual machine run</h4>
<p>First, we need a <code>codes</code> list and a <code>stack</code>(int).</p>
<p>An <code>eip</code>: presents the address of current running code.</p>
<p>A <code>varTable</code>: memorizes the address of the variety in stack.</p>
<p>A <code>funcTable</code>: memorizes the address of the function in codes list.</p>
<p>A <code>labelTable</code>: Memorizes the address of the label in codes list.</p>
<p>Then, run the code one after another and manage the stack.</p>
<h4 id="how-to-distinguish-different-variety">How to distinguish different variety</h4>
<p>Before generate codes, differentiate varieties from different scopes by its only scope number, like: <code>areaID + &quot;_&quot; + curWord.getContent()</code>. In this situation, the variety will not appear more than once in codes, except for recursive function call, which will be solved by push <code>varTable</code> to stack(show later).</p>
<h4 id="specific-code-definition">Specific Code Definition</h4>
<p>First, define a class for PCode:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PCode</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">CodeType</span> <span class="n">type</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Object</span> <span class="n">value1</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Object</span> <span class="n">value2</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>It presents one code object, which has a CodeType and two operating values. CodeType is an enum. Value1 and value2 maybe Integer or String or null, which depends on specific code type.</p>
<h5 id="calculation-type">Calculation Type</h5>
<p>Two operators:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">pop</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">pop</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">push</span><span class="o">(</span><span class="n">cal</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">));</span>
</span></span></code></pre></div><p>Single operator:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">push</span><span class="o">(</span><span class="n">cal</span><span class="o">(</span><span class="n">pop</span><span class="o">()));</span>
</span></span></code></pre></div><h5 id="var">VAR</h5>
<p><strong>VAR</strong> command to declare a variable, save the variable name and the address assigned to it in the variable table.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">case</span> <span class="n">VAR</span><span class="o">:</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Var</span> <span class="n">var</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Var</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">varTable</span><span class="o">.</span><span class="na">put</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">code</span><span class="o">.</span><span class="na">getValue1</span><span class="o">(),</span> <span class="n">var</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Var.class:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Var</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">index</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">dimension</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">dim1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">dim2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h5 id="dimvar">DIMVAR</h5>
<p><strong>DIMVAR</strong> command to declare an array. Set the dimension information of the var.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">case</span> <span class="n">DIMVAR</span><span class="o">:</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Var</span> <span class="n">var</span> <span class="o">=</span> <span class="n">getVar</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">code</span><span class="o">.</span><span class="na">getValue1</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">code</span><span class="o">.</span><span class="na">getValue2</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">var</span><span class="o">.</span><span class="na">setDimension</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">pop</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">var</span><span class="o">.</span><span class="na">setDim1</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">pop</span><span class="o">(),</span> <span class="n">i</span> <span class="o">=</span> <span class="n">pop</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">var</span><span class="o">.</span><span class="na">setDim1</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">var</span><span class="o">.</span><span class="na">setDim2</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h5 id="placeholder">PLACEHOLDER</h5>
<p><strong>PLACEHOLDER</strong> command to grow the stack down, allocate the new space to the variety and array.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">case</span> <span class="n">PLACEHOLDER</span><span class="o">:</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Var</span> <span class="n">var</span> <span class="o">=</span> <span class="n">getVar</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">code</span><span class="o">.</span><span class="na">getValue1</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">code</span><span class="o">.</span><span class="na">getValue2</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">push</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">var</span><span class="o">.</span><span class="na">getDim1</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">push</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">var</span><span class="o">.</span><span class="na">getDim1</span><span class="o">()</span> <span class="o">*</span> <span class="n">var</span><span class="o">.</span><span class="na">getDim2</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">push</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h5 id="other">Other</h5>
<p>Calculation type: pop the stack top once or twice, calculate them and push again.</p>
<p>Jump Type: When it&rsquo;s command about jump, just check if the condition is satisfied and change the <code>eip</code>.</p>
<p>Function call: as follows</p>
<h4 id="function-call-procedure">Function call procedure</h4>
<p>First, before function call, there will be some parameters to be pushed into the stack. Each will be followed by a <code>RPARA</code> command, which memorize the address of the previous variety.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">case</span> <span class="n">RPARA</span><span class="o">:</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">code</span><span class="o">.</span><span class="na">getValue1</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">rparas</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">rparas</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Second, function <code>CALL</code>.</p>
<p>Memorize the eip, stack top address, and information about the function(In fact, they will be pushed into stack too). Then update the <code>varTable</code> and <code>eip</code>.  Ready for execute function.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">case</span> <span class="n">CALL</span><span class="o">:</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Func</span> <span class="n">func</span> <span class="o">=</span> <span class="n">funcTable</span><span class="o">.</span><span class="na">get</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">code</span><span class="o">.</span><span class="na">getValue1</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">retInfos</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">RetInfo</span><span class="o">(</span><span class="n">eip</span><span class="o">,</span> <span class="n">varTable</span><span class="o">,</span> <span class="n">stack</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">func</span><span class="o">.</span><span class="na">getArgs</span><span class="o">(),</span> <span class="n">func</span><span class="o">.</span><span class="na">getArgs</span><span class="o">(),</span> <span class="n">nowArgsNum</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">eip</span> <span class="o">=</span> <span class="n">func</span><span class="o">.</span><span class="na">getIndex</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">varTable</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">callArgsNum</span> <span class="o">=</span> <span class="n">func</span><span class="o">.</span><span class="na">getArgs</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">nowArgsNum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Finally, return when it&rsquo;s <code>RET</code></p>
<p>Restore <code>eip</code>, <code>varTable</code> from <code>RetInfo</code>, clear the new information pushed when function in the stack.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">case</span> <span class="n">RET</span><span class="o">:</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">code</span><span class="o">.</span><span class="na">getValue1</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">RetInfo</span> <span class="n">info</span> <span class="o">=</span> <span class="n">retInfos</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">retInfos</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">eip</span> <span class="o">=</span> <span class="n">info</span><span class="o">.</span><span class="na">getEip</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">varTable</span> <span class="o">=</span> <span class="n">info</span><span class="o">.</span><span class="na">getVarTable</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">callArgsNum</span> <span class="o">=</span> <span class="n">info</span><span class="o">.</span><span class="na">getCallArgsNum</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">nowArgsNum</span> <span class="o">=</span> <span class="n">info</span><span class="o">.</span><span class="na">getNowArgsNum</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span><span class="o">.</span><span class="na">subList</span><span class="o">(</span><span class="n">info</span><span class="o">.</span><span class="na">getStackPtr</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">info</span><span class="o">.</span><span class="na">getParaNum</span><span class="o">(),</span> <span class="n">stack</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">clear</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span><span class="o">.</span><span class="na">subList</span><span class="o">(</span><span class="n">info</span><span class="o">.</span><span class="na">getStackPtr</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">info</span><span class="o">.</span><span class="na">getParaNum</span><span class="o">(),</span> <span class="n">stack</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">clear</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h4 id="value-or-address">Value or Address</h4>
<p>Push value or address of the variety is an important thing, it depends on what I need, which will be presented when I describe how to generate codes.</p>
<p>The command action is as follows(<code>getAddress</code> is used for get the address of the previous variety ).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">case</span> <span class="n">VALUE</span><span class="o">:</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Var</span> <span class="n">var</span> <span class="o">=</span> <span class="n">getVar</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">code</span><span class="o">.</span><span class="na">getValue1</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">code</span><span class="o">.</span><span class="na">getValue2</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">address</span> <span class="o">=</span> <span class="n">getAddress</span><span class="o">(</span><span class="n">var</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">push</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">address</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="n">ADDRESS</span><span class="o">:</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Var</span> <span class="n">var</span> <span class="o">=</span> <span class="n">getVar</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">code</span><span class="o">.</span><span class="na">getValue1</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">code</span><span class="o">.</span><span class="na">getValue2</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">address</span> <span class="o">=</span> <span class="n">getAddress</span><span class="o">(</span><span class="n">var</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">push</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h4 id="code-generate">Code Generate</h4>
<p>Code generated from the grammatical analyst procedure.</p>
<h5 id="declaration">Declaration</h5>
<p>There is no need to distinguish const and var. When declare a variety, just new a variety and let it point to the stack top. Then if it has an initialization, just push the values one after another. If not, add a <code>PLACEHOLDER</code> command to push something(I push 0) to the stack to hold the place.</p>
<h5 id="assign-sentence">Assign sentence</h5>
<p>In this situation, first calculate and push the address of the variety to the stack top. Then analyze expressions. After that, there are only two number in the stack, which are address and value. Assign the value to the address.</p>
<h5 id="condition-control-sentence">Condition control sentence</h5>
<p>First, generate labels. Then, place jump sentences in the proper places.</p>
<p>labels about if and while will be generated and then stored in a stack type structure. like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">whileLabels</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;());</span>
</span></span><span class="line"><span class="cl"><span class="n">whileLabels</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">whileLabels</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;while&#34;</span><span class="o">,</span> <span class="n">labelGenerator</span><span class="o">.</span><span class="na">getLabel</span><span class="o">(</span><span class="s">&#34;while&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="n">whileLabels</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">whileLabels</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;while_end&#34;</span><span class="o">,</span> <span class="n">labelGenerator</span><span class="o">.</span><span class="na">getLabel</span><span class="o">(</span><span class="s">&#34;while_end&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="n">whileLabels</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">whileLabels</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;while_block&#34;</span><span class="o">,</span> <span class="n">labelGenerator</span><span class="o">.</span><span class="na">getLabel</span><span class="o">(</span><span class="s">&#34;while_block&#34;</span><span class="o">));</span>
</span></span></code></pre></div><p>Take if as example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">if</span> <span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;IFTK&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">codes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">PCode</span><span class="o">(</span><span class="n">CodeType</span><span class="o">.</span><span class="na">LABEL</span><span class="o">,</span> <span class="n">ifLabels</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">ifLabels</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;if&#34;</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="n">analyseCond</span><span class="o">(</span><span class="s">&#34;IFTK&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="n">codes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">PCode</span><span class="o">(</span><span class="n">CodeType</span><span class="o">.</span><span class="na">JZ</span><span class="o">,</span> <span class="n">ifLabels</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">ifLabels</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;else&#34;</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">    <span class="n">codes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">PCode</span><span class="o">(</span><span class="n">CodeType</span><span class="o">.</span><span class="na">LABEL</span><span class="o">,</span> <span class="n">ifLabels</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">ifLabels</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;if_block&#34;</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">    <span class="n">analyseStmt</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">codes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">PCode</span><span class="o">(</span><span class="n">CodeType</span><span class="o">.</span><span class="na">JMP</span><span class="o">,</span> <span class="n">ifLabels</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">ifLabels</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;if_end&#34;</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">    <span class="n">codes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">PCode</span><span class="o">(</span><span class="n">CodeType</span><span class="o">.</span><span class="na">LABEL</span><span class="o">,</span> <span class="n">ifLabels</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">ifLabels</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;else&#34;</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;ELSETK&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">getWord</span><span class="o">();</span> <span class="c1">//else
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">analyseStmt</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">codes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">PCode</span><span class="o">(</span><span class="n">CodeType</span><span class="o">.</span><span class="na">LABEL</span><span class="o">,</span> <span class="n">ifLabels</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">ifLabels</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;if_end&#34;</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>while:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">if</span> <span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;WHILETK&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="n">codes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">PCode</span><span class="o">(</span><span class="n">CodeType</span><span class="o">.</span><span class="na">LABEL</span><span class="o">,</span> <span class="n">whileLabels</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">whileLabels</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;while&#34;</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="n">analyseCond</span><span class="o">(</span><span class="s">&#34;WHILETK&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="n">codes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">PCode</span><span class="o">(</span><span class="n">CodeType</span><span class="o">.</span><span class="na">JZ</span><span class="o">,</span> <span class="n">whileLabels</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">whileLabels</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;while_end&#34;</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">    <span class="n">codes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">PCode</span><span class="o">(</span><span class="n">CodeType</span><span class="o">.</span><span class="na">LABEL</span><span class="o">,</span> <span class="n">whileLabels</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">whileLabels</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;while_block&#34;</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">    <span class="n">analyseStmt</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="n">codes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">PCode</span><span class="o">(</span><span class="n">CodeType</span><span class="o">.</span><span class="na">JMP</span><span class="o">,</span> <span class="n">whileLabels</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">whileLabels</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;while&#34;</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">    <span class="n">codes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">PCode</span><span class="o">(</span><span class="n">CodeType</span><span class="o">.</span><span class="na">LABEL</span><span class="o">,</span> <span class="n">whileLabels</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">whileLabels</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;while_end&#34;</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">    <span class="n">whileLabels</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">whileLabels</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// break
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;BREAKTK&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">getWord</span><span class="o">();</span><span class="c1">//break
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">codes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">PCode</span><span class="o">(</span><span class="n">CodeType</span><span class="o">.</span><span class="na">JMP</span><span class="o">,</span> <span class="n">whileLabels</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">whileLabels</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;while_end&#34;</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl"> 		<span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// continue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">typeEquals</span><span class="o">(</span><span class="s">&#34;CONTINUETK&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">getWord</span><span class="o">();</span><span class="c1">//continue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">codes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">PCode</span><span class="o">(</span><span class="n">CodeType</span><span class="o">.</span><span class="na">JMP</span><span class="o">,</span> <span class="n">whileLabels</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">whileLabels</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;while&#34;</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span> 
</span></span></code></pre></div><h3 id="after-code-3">After Code</h3>
<p>Because of some runtime errors and information shortages, I added and removed some Pcode. At the same, there are some new troubles about address pass and short circuit calculation.</p>
<h4 id="specific-code-definition-1">Specific Code Definition</h4>
<p>In Operation, <code>push()</code> means put value into the top of the stack. <code>pop()</code> means pop the value from the top of the stack.</p>
<h5 id="common-type">Common Type</h5>
<table>
<thead>
<tr>
<th>CodeType</th>
<th>Value1</th>
<th>Value2</th>
<th>Operation</th>
</tr>
</thead>
<tbody>
<tr>
<td>LABEL</td>
<td>Label_name</td>
<td>Set  a label</td>
<td></td>
</tr>
<tr>
<td>VAR</td>
<td>Ident_name</td>
<td>Declare  a variety</td>
<td></td>
</tr>
<tr>
<td>PUSH</td>
<td>Ident_name/Digit</td>
<td>push(value1)</td>
<td></td>
</tr>
<tr>
<td>POP</td>
<td>Address</td>
<td>Ident_name</td>
<td>*value1 = value2</td>
</tr>
<tr>
<td>JZ</td>
<td>Label_name</td>
<td></td>
<td>Jump if stack top is zero</td>
</tr>
<tr>
<td>JNZ</td>
<td>Label_name</td>
<td></td>
<td>Jump if stack top is not zero</td>
</tr>
<tr>
<td>JMP</td>
<td>Label_name</td>
<td></td>
<td>Jump unconditionally</td>
</tr>
<tr>
<td>MAIN</td>
<td></td>
<td></td>
<td>Main function label</td>
</tr>
<tr>
<td>FUNC</td>
<td></td>
<td></td>
<td>Function label</td>
</tr>
<tr>
<td>ENDFUNC</td>
<td></td>
<td></td>
<td>End of function label</td>
</tr>
<tr>
<td>PARA</td>
<td>Ident_name</td>
<td>Type</td>
<td>Parameters</td>
</tr>
<tr>
<td>RET</td>
<td>Return value or not</td>
<td></td>
<td>Function return</td>
</tr>
<tr>
<td>CALL</td>
<td>Function name</td>
<td></td>
<td>Function call</td>
</tr>
<tr>
<td>RPARA</td>
<td>Type</td>
<td></td>
<td>Get parameters ready for function call</td>
</tr>
<tr>
<td>GETINT</td>
<td></td>
<td></td>
<td>Get a integer and put it into stack top</td>
</tr>
<tr>
<td>PRINT</td>
<td>String</td>
<td>Para num</td>
<td>Pop values and print.</td>
</tr>
<tr>
<td>DIMVAR</td>
<td>Ident_name</td>
<td>Type</td>
<td>Set dimension info for array variety</td>
</tr>
<tr>
<td>VALUE</td>
<td>Ident_name</td>
<td>Type</td>
<td>Get the variety value</td>
</tr>
<tr>
<td>ADDRESS</td>
<td>Ident_name</td>
<td>Type</td>
<td>Get the variety address</td>
</tr>
<tr>
<td>PLACEHOLDER</td>
<td></td>
<td></td>
<td>Push something to hold places</td>
</tr>
<tr>
<td>EXIT</td>
<td></td>
<td></td>
<td>Exit</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>CodeType</th>
<th>Value1</th>
<th>Value2</th>
<th>Operation</th>
</tr>
</thead>
<tbody>
<tr>
<td>ADD</td>
<td></td>
<td></td>
<td>+</td>
</tr>
<tr>
<td>SUB</td>
<td></td>
<td></td>
<td>-</td>
</tr>
<tr>
<td>MUL</td>
<td></td>
<td></td>
<td>*</td>
</tr>
<tr>
<td>DIV</td>
<td></td>
<td></td>
<td>/</td>
</tr>
<tr>
<td>MOD</td>
<td></td>
<td></td>
<td>%</td>
</tr>
<tr>
<td>CMPEQ</td>
<td></td>
<td></td>
<td>==</td>
</tr>
<tr>
<td>CMPNE</td>
<td></td>
<td></td>
<td>!=</td>
</tr>
<tr>
<td>CMPGT</td>
<td></td>
<td></td>
<td>&gt;</td>
</tr>
<tr>
<td>CMPLT</td>
<td></td>
<td></td>
<td>&lt;</td>
</tr>
<tr>
<td>CMPGE</td>
<td></td>
<td></td>
<td>&gt;=</td>
</tr>
<tr>
<td>CMPLE</td>
<td></td>
<td></td>
<td>&lt;=</td>
</tr>
<tr>
<td>AND</td>
<td></td>
<td></td>
<td>&amp;&amp;</td>
</tr>
<tr>
<td>OR</td>
<td></td>
<td></td>
<td>||</td>
</tr>
<tr>
<td>NOT</td>
<td></td>
<td></td>
<td>!</td>
</tr>
<tr>
<td>NEG</td>
<td></td>
<td></td>
<td>-</td>
</tr>
<tr>
<td>POS</td>
<td></td>
<td></td>
<td>+</td>
</tr>
</tbody>
</table>
<h4 id="short-circuit-calculation">short circuit calculation</h4>
<p>There are two situations I need to use short circuit calculation :</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="mf">1.</span> <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="o">&amp;&amp;</span><span class="n">b</span><span class="p">)</span> <span class="c1">// a is false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="mf">2.</span> <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="o">||</span><span class="n">b</span><span class="p">)</span> <span class="c1">// b is true
</span></span></span></code></pre></div><p>This seems not an easy thing and I acutally spent lots of time to solve it.</p>
<p>My method is as follows:</p>
<p>First, when I analyze <code>analyseLOrExp</code>, every <code>analyseLAndExp</code> will be followed by a <code>JNZ</code>, which is used for detect if the cond is false. If it is, jump to the if body label. At the same time, I generated cond label, which is ready for the <code>analyseLAndExp</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">analyseLOrExp</span><span class="o">(</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;</span> <span class="n">exp</span><span class="o">,</span> <span class="n">String</span> <span class="n">from</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(...)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="o">...</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">label</span> <span class="o">=</span> <span class="n">labelGenerator</span><span class="o">.</span><span class="na">getLabel</span><span class="o">(</span><span class="s">&#34;cond_&#34;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">analyseLAndExp</span><span class="o">(</span><span class="n">exp1</span><span class="o">,</span> <span class="n">from</span><span class="o">,</span> <span class="n">label</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">codes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">PCode</span><span class="o">(</span><span class="n">CodeType</span><span class="o">.</span><span class="na">LABEL</span><span class="o">,</span> <span class="n">label</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(...)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">codes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">PCode</span><span class="o">(</span><span class="n">CodeType</span><span class="o">.</span><span class="na">OR</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(...)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(...)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">codes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">PCode</span><span class="o">(</span><span class="n">CodeType</span><span class="o">.</span><span class="na">JNZ</span><span class="o">,</span> <span class="n">ifLabels</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">ifLabels</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;if_block&#34;</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">          <span class="o">...</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>In the <code>analyseLAndExp</code>, every <code>analyseEqExp</code> will be followed by a <code>JZ</code>, which is used for detect if the cond is true. If it is, jump to the cond label I set just now.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">analyseLAndExp</span><span class="o">(</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;</span> <span class="n">exp</span><span class="o">,</span> <span class="n">String</span> <span class="n">from</span><span class="o">,</span> <span class="n">String</span> <span class="n">label</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(...)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="o">...</span>
</span></span><span class="line"><span class="cl">        <span class="n">analyseEqExp</span><span class="o">(</span><span class="n">exp1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(...)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">codes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">PCode</span><span class="o">(</span><span class="n">CodeType</span><span class="o">.</span><span class="na">AND</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(...)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(...)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">codes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">PCode</span><span class="o">(</span><span class="n">CodeType</span><span class="o">.</span><span class="na">JZ</span><span class="o">,</span> <span class="n">label</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span> 
</span></span><span class="line"><span class="cl">          <span class="o">...</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>By these means, short circuit calculation is solved.</p>
<h2 id="summary">Summary</h2>
<p>![[编译实验总结感想]]</p>
<h2 id="reference">Reference</h2>
<p><a href="https://www.bookstack.cn/read/pandolia-tinyc/about.md">https://www.bookstack.cn/read/pandolia-tinyc/about.md</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Memo文档</title>
      <link>https://zzhgo.com/posts/projects/memo%E6%96%87%E6%A1%A3/</link>
      <pubDate>Thu, 28 Oct 2021 17:29:00 +0000</pubDate>
      
      <guid>https://zzhgo.com/posts/projects/memo%E6%96%87%E6%A1%A3/</guid>
      <description>Memo Memo用于随时记录，记录生活中的某一刻，记录今天的心情，或是记录看过的一部电影，一本书，留下自己此时的感想，并在自己最爱的电影或书籍的二刷三刷后再次记录下时间和新的想法&amp;hellip;
灵感来源于豆瓣，比起豆瓣的功能多出的个人需求为：需要一个简洁没有过量冗余信息的片单和书单记录软件，记录二刷，三刷的时间，以及想要随时记录每一天，并且在几年后回顾那年今日，留一些感动与感慨，让每一天都值得被纪念，故开发此软件。
图片 （介绍及短评摘自豆瓣，侵删）
Mac, iPad适配
简介 主页面 主界面分为3个标签：主页，电影，书籍
主页 电影 这里是你看过的电影片单，你可以随时看到你标记过的所有电影，以及在任何时候添加一个新的电影进入你的片单
进入某条电影，如果你输入的电影在数据库之中（数据来自豆瓣，侵删），你就可以看到关于电影的介绍：演员，导演，豆瓣评分，类别，介绍等，以及最重要的，在最下方，看到你第一次观看的时间以及感想
当然，点击此方框，你可以进入到第二次标记的页面，记录下你的第二次观影以及新的感想
书籍 类似电影，这里是你的书单，你可以添加你看过的书籍，并且记录第n次阅读的体验，相信每一次阅读，都会发现不少新东西
功能 标记某一天的感受 标记某本电影，某本书 多次标记某电影和书的观看时间和感受 自动展示电影和书籍的相关图片与简介 图文并茂的主页卡片展示设计 在主页展示进一个月看过的电影 在主页展示今天以及那年今日的感想 架构以及实现 源代码文件共25个
主要分为三个部分：Controller Model Views
Controller 一些静态函数，实现点击界面按钮后的某些后端反应以及后端用到的函数，如图像获取，日期格式化，Mark筛选等
其中图片的读取使用了异步加载url的方式，如果url没有解析成功将不会显示图片
class ImageLoader: ObservableObject { var didChange = PassthroughSubject&amp;lt;Data, Never&amp;gt;() var data = Data() { didSet { didChange.send(data) } } init(urlString: String) { guard let url = URL(string: urlString) else { return } let task = URLSession.shared.dataTask(with: url) { (data, response, error) in guard let data = data else { return } DispatchQueue.</description>
      <content:encoded><![CDATA[<h1 id="memo">Memo</h1>
<p>Memo用于随时记录，记录生活中的某一刻，记录今天的心情，或是记录看过的一部电影，一本书，留下自己此时的感想，并在自己最爱的电影或书籍的二刷三刷后再次记录下时间和新的想法&hellip;</p>
<p>灵感来源于豆瓣，比起豆瓣的功能多出的个人需求为：需要一个简洁没有过量冗余信息的片单和书单记录软件，记录二刷，三刷的时间，以及想要随时记录每一天，并且在几年后回顾那年今日，留一些感动与感慨，让每一天都值得被纪念，故开发此软件。</p>
<h2 id="图片">图片</h2>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/OMRjEl.png" alt=""  />
</p>
<p>（介绍及短评摘自豆瓣，侵删）</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/4qk5Hd.jpg" alt="iPad适配"  />
</p>
<p>Mac, iPad适配</p>
<h2 id="简介">简介</h2>
<h3 id="主页面">主页面</h3>
<p>主界面分为3个标签：主页，电影，书籍</p>
<h5 id="主页">主页</h5>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/nU8yrj.jpg" alt="观"  />
</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/4mxT4Y.jpg" alt="记"  />
</p>
<h5 id="电影">电影</h5>
<p>这里是你看过的电影片单，你可以随时看到你标记过的所有电影，以及在任何时候添加一个新的电影进入你的片单</p>
<p>进入某条电影，如果你输入的电影在数据库之中（数据来自豆瓣，侵删），你就可以看到关于电影的介绍：演员，导演，豆瓣评分，类别，介绍等，以及最重要的，在最下方，看到你第一次观看的时间以及感想</p>
<p>当然，点击此方框，你可以进入到第二次标记的页面，记录下你的第二次观影以及新的感想</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/somvRM.jpg" alt="电影列表"  />
</p>
<h5 id="书籍">书籍</h5>
<p>类似电影，这里是你的书单，你可以添加你看过的书籍，并且记录第n次阅读的体验，相信每一次阅读，都会发现不少新东西</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/v7ziTD.jpg" alt="书"  />
</p>
<h2 id="功能">功能</h2>
<ul>
<li>标记某一天的感受</li>
<li>标记某本电影，某本书</li>
<li>多次标记某电影和书的观看时间和感受</li>
<li>自动展示电影和书籍的相关图片与简介</li>
<li>图文并茂的主页卡片展示设计</li>
<li>在主页展示进一个月看过的电影</li>
<li>在主页展示今天以及那年今日的感想</li>
</ul>
<h2 id="架构以及实现">架构以及实现</h2>
<p>源代码文件共25个</p>
<p>主要分为三个部分：Controller Model Views</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/1Iyk57.jpg" alt="源文件树"  />
</p>
<h4 id="controller">Controller</h4>
<p>一些静态函数，实现点击界面按钮后的某些后端反应以及后端用到的函数，如图像获取，日期格式化，Mark筛选等</p>
<p>其中图片的读取使用了异步加载url的方式，如果url没有解析成功将不会显示图片</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">ImageLoader</span><span class="p">:</span> <span class="n">ObservableObject</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">didChange</span> <span class="p">=</span> <span class="n">PassthroughSubject</span><span class="p">&lt;</span><span class="n">Data</span><span class="p">,</span> <span class="n">Never</span><span class="p">&gt;()</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">data</span> <span class="p">=</span> <span class="n">Data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">didSet</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">didChange</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">init</span><span class="p">(</span><span class="n">urlString</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">url</span> <span class="p">=</span> <span class="n">URL</span><span class="p">(</span><span class="n">string</span><span class="p">:</span> <span class="n">urlString</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="kd">let</span> <span class="nv">task</span> <span class="p">=</span> <span class="n">URLSession</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">dataTask</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
</span></span><span class="line"><span class="cl">            <span class="k">guard</span> <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="n">data</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">DispatchQueue</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">async</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="kc">self</span><span class="p">.</span><span class="n">data</span> <span class="p">=</span> <span class="n">data</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">task</span><span class="p">.</span><span class="n">resume</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="model">Model</h4>
<p>主要用到的对象为Mark：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Mark</span><span class="p">:</span> <span class="n">Codable</span><span class="p">,</span> <span class="n">Identifiable</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">index</span><span class="p">:</span><span class="nb">Int</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">type</span><span class="p">:</span><span class="n">ModelType</span> <span class="p">=</span> <span class="n">ModelType</span><span class="p">.</span><span class="n">NONE</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">name</span> <span class="p">=</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">dates</span><span class="p">:</span> <span class="p">[</span><span class="n">Date</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">feeling</span> <span class="p">=</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">init</span><span class="p">(</span><span class="n">index</span><span class="p">:</span> <span class="nb">Int</span><span class="p">,</span><span class="n">type</span><span class="p">:</span><span class="n">ModelType</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span><span class="nb">String</span><span class="p">,</span> <span class="n">date</span><span class="p">:</span><span class="n">Date</span><span class="p">,</span> <span class="n">feeling</span><span class="p">:</span><span class="nb">String</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="kc">self</span><span class="p">.</span><span class="n">index</span> <span class="p">=</span> <span class="n">index</span>
</span></span><span class="line"><span class="cl">        <span class="kc">self</span><span class="p">.</span><span class="n">type</span> <span class="p">=</span> <span class="n">type</span>
</span></span><span class="line"><span class="cl">        <span class="kc">self</span><span class="p">.</span><span class="n">name</span> <span class="p">=</span> <span class="n">name</span>
</span></span><span class="line"><span class="cl">        <span class="kc">self</span><span class="p">.</span><span class="n">dates</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">date</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="kc">self</span><span class="p">.</span><span class="n">feeling</span> <span class="p">=</span> <span class="n">feeling</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Movie, Book 为电影和书籍的简介，不进行重复的展示</p>
<p>他们遵循MarkableObject协议，用于在展示Mark详情时读取object后再作类型判断</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">struct</span> <span class="nc">Movie</span><span class="p">:</span> <span class="nb">Hashable</span><span class="p">,</span> <span class="n">Codable</span><span class="p">,</span> <span class="n">Identifiable</span><span class="p">,</span> <span class="n">MarkableObject</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">id</span><span class="p">:</span> <span class="nb">String</span> <span class="p">=</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>ModelData负责数据存储的任务</p>
<p>用到了自带的UserDefaults.standard存储数据</p>
<p>movies和books分别为电影和书籍数据集，内置在app中</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kr">final</span> <span class="kd">class</span> <span class="nc">ModelData</span><span class="p">:</span> <span class="n">ObservableObject</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">moviesDict</span> <span class="p">=</span> <span class="n">getMoviesDict</span><span class="p">(</span><span class="n">movies</span><span class="p">:</span> <span class="n">load</span><span class="p">(</span><span class="s">&#34;movies.json&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">booksDict</span> <span class="p">=</span> <span class="n">getBooksDict</span><span class="p">(</span><span class="n">books</span><span class="p">:</span> <span class="n">load</span><span class="p">(</span><span class="s">&#34;books.json&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="p">@</span><span class="n">Published</span> <span class="kd">var</span> <span class="nv">marks</span><span class="p">:</span> <span class="p">[</span><span class="n">Mark</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">init</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">loadMarks</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">func</span> <span class="nf">loadMarks</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">marks</span> <span class="p">=</span> <span class="n">UserDefaults</span><span class="p">.</span><span class="n">standard</span><span class="p">.</span><span class="n">object</span><span class="p">(([</span><span class="n">Mark</span><span class="p">]).</span><span class="kc">self</span><span class="p">,</span> <span class="n">with</span><span class="p">:</span> <span class="s">&#34;Marks&#34;</span><span class="p">)</span> <span class="p">??</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">func</span> <span class="nf">saveMarks</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">let</span> <span class="nv">standard</span> <span class="p">=</span> <span class="n">UserDefaults</span><span class="p">.</span><span class="n">standard</span>
</span></span><span class="line"><span class="cl">        <span class="n">standard</span><span class="p">.</span><span class="kr">set</span><span class="p">(</span><span class="n">object</span><span class="p">:</span> <span class="n">marks</span><span class="p">,</span> <span class="n">forKey</span><span class="p">:</span> <span class="s">&#34;Marks&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>ModelType为枚举类型，用于Mark类型判断</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">enum</span> <span class="nc">ModelType</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="n">Codable</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="n">NONE</span> <span class="p">=</span> <span class="s">&#34;无&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="n">MOVIE</span> <span class="p">=</span> <span class="s">&#34;电影&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="n">BOOK</span> <span class="p">=</span> <span class="s">&#34;书籍&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="n">DAY</span> <span class="p">=</span> <span class="s">&#34;今天&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="views">Views</h4>
<p>界面UI</p>
<p>用到了environmentObject来同步各个界面的数据</p>
<p>父界面给子界面传递@Binding的变量，子界面拿到引用直接演示和修改，不会出现数据不同步的问题</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="p">@</span><span class="n">main</span>
</span></span><span class="line"><span class="cl"><span class="kd">struct</span> <span class="nc">MemoApp</span><span class="p">:</span> <span class="n">App</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">@</span><span class="n">StateObject</span> <span class="kd">private</span> <span class="kd">var</span> <span class="nv">modelData</span> <span class="p">=</span> <span class="n">ModelData</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">Scene</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">WindowGroup</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">ContentView</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                    <span class="p">.</span><span class="n">environmentObject</span><span class="p">(</span><span class="n">modelData</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h5 id="mainmenu">MainMenu</h5>
<p>MarkList: Mark列表，即展示电影和书籍列表</p>
<p>使用NavigationLink，向子界面：MarkDetail传递mark的引用</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/1qxgoz.png" alt=""  />
</p>
<p>HomeView: 主界面</p>
<h5 id="mark">Mark</h5>
<p>关于Mark的界面</p>
<p>MarkDetail: 一个Mark的详情</p>
<p>大部分子界面都如此UI一样，引入modelData的环境变量，承接上一级传下来的@Binding变量，实现数据的同步</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="p">@</span><span class="n">EnvironmentObject</span> <span class="kd">var</span> <span class="nv">modelData</span><span class="p">:</span> <span class="n">ModelData</span>
</span></span><span class="line"><span class="cl"><span class="p">@</span><span class="n">Binding</span> <span class="kd">var</span> <span class="nv">mark</span><span class="p">:</span> <span class="n">Mark</span>
</span></span></code></pre></div><p>其中要进行object的解析，如果用户输入能索引本地数据集的一个条目上，将会展示此object的详情</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/oEbVAd.png" alt=""  />
</p>
<p>MarkAdd: Mark增加界面</p>
<p>MarkEdit: Mark修改界面</p>
<p>MarkToday: 标记今天界面</p>
<p>这三个UI都用到了@State来实时同步Form表单中的信息</p>
<p>以至于用户输入能够及时的反应在变量上并且写入modelData</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/Lp7xQ3.png" alt=""  />
</p>
<h4 id="kit">Kit</h4>
<p>其他组件</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/5YOzFK.png" alt="其他组件"  />
</p>
<p>电影和书籍详情，时间线，圆形和方形图片，卡片组件等</p>
<p>均已展示在各个页面中</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
