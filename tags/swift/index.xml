<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Swift on SOTO-BLOG</title>
    <link>https://zzhgo.com/tags/swift/</link>
    <description>Recent content in Swift on SOTO-BLOG</description>
    <image>
      <url>https://zzhgo.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://zzhgo.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 27 Dec 2021 01:16:00 +0000</lastBuildDate><atom:link href="https://zzhgo.com/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SwiftUI 图表库 ChartView</title>
      <link>https://zzhgo.com/posts/swiftui-%E5%9B%BE%E8%A1%A8%E5%BA%93-chartview/</link>
      <pubDate>Mon, 27 Dec 2021 01:16:00 +0000</pubDate>
      
      <guid>https://zzhgo.com/posts/swiftui-%E5%9B%BE%E8%A1%A8%E5%BA%93-chartview/</guid>
      <description>写这个[[关于Swift开发的依赖安装]]的时候回顾之前的[[IoTMonitor]]，突然很想推荐一下这个库，真的很好看，至少很符合我的审美。
当时第一次试图在SwiftUI画图，搜遍全网没找到几个能用的，而且能用的也相当丑，踩了不少坑，终于跟着一个demo追根溯源找到了这个库，救我于水火之中。
(说起来也是，写第一个SwiftUI APP的时候也一样，在网上找资料真的太艰难了，国内几乎没有多少人写这些东西)
地址 https://github.com/AppPear/ChartView
官方图例
好看就完了，另外使用也相当简单，两个例子：
MultiLineChartView(data: [([8,32,11,23,40,28], GradientColors.green), ([90,99,78,111,70,60,77], GradientColors.purple), ([34,56,72,38,43,100,50], GradientColors.orngPink)], title: &amp;#34;Title&amp;#34;) PieChartView(data: [8,23,54,32], title: &amp;#34;Title&amp;#34;, legend: &amp;#34;Legendary&amp;#34;) // legend is optional 而且这些卡片样式都是可以自己重新修订的，不用担心和自己的风格不一样。比如我之前的这个直接搬了两个卡片上去，它的阴影和我其他没有阴影的卡片是很不和谐的，于是我稍作修改，把他改成了和我其他卡片样式风格一致的样子。
因为之前开发仓促，使用的时候没有仔细修改样式，但是可以肯定这个库还有更多的发挥空间。总之这个库真的很不错，封装程度高又不失自定义的空间，推荐。</description>
      <content:encoded><![CDATA[<p>写这个[[关于Swift开发的依赖安装]]的时候回顾之前的[[IoTMonitor]]，突然很想推荐一下这个库，真的很好看，至少很符合我的审美。</p>
<p>当时第一次试图在SwiftUI画图，搜遍全网没找到几个能用的，而且能用的也相当丑，踩了不少坑，终于跟着一个demo追根溯源找到了这个库，救我于水火之中。</p>
<p>(说起来也是，写第一个SwiftUI APP的时候也一样，在网上找资料真的太艰难了，国内几乎没有多少人写这些东西)</p>
<p>地址 <a href="https://github.com/AppPear/ChartView">https://github.com/AppPear/ChartView</a></p>
<p>官方图例</p>
<p><img src="https://user-images.githubusercontent.com/2826764/130787802-9aa619ee-05de-4343-ba3c-1796e4d05e08.gif" width="26%"></img> <img src="https://user-images.githubusercontent.com/2826764/130787814-283f3d26-6c9d-448b-b2c7-879e60a3b05d.gif" width="26%"></img></p>
<p><img src="https://user-images.githubusercontent.com/2826764/130785262-010d6791-16cf-485d-b920-29e4086477e2.png" width="45%"></img></p>
<p><img src="https://user-images.githubusercontent.com/2826764/130785266-94a08622-2963-4177-8777-8bd3ad463809.png" width="45%"></img></p>
<p><img src="https://user-images.githubusercontent.com/2826764/130785268-284314de-ba96-4fb7-a1e5-8a46578e1f0e.png" width="45%"></img></p>
<p><img src="https://user-images.githubusercontent.com/2826764/131211993-5d33312b-09af-44b4-a32e-ffaad739adfe.gif" width="45%"></img> <img src="https://user-images.githubusercontent.com/2826764/131211994-48c9ce4e-2e67-40a0-b727-c88bdbd22cd0.gif" width="45%"></p>
<p>好看就完了，另外使用也相当简单，两个例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="n">MultiLineChartView</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="p">[([</span><span class="mi">8</span><span class="p">,</span><span class="mi">32</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">28</span><span class="p">],</span> <span class="n">GradientColors</span><span class="p">.</span><span class="n">green</span><span class="p">),</span> <span class="p">([</span><span class="mi">90</span><span class="p">,</span><span class="mi">99</span><span class="p">,</span><span class="mi">78</span><span class="p">,</span><span class="mi">111</span><span class="p">,</span><span class="mi">70</span><span class="p">,</span><span class="mi">60</span><span class="p">,</span><span class="mi">77</span><span class="p">],</span> <span class="n">GradientColors</span><span class="p">.</span><span class="n">purple</span><span class="p">),</span> <span class="p">([</span><span class="mi">34</span><span class="p">,</span><span class="mi">56</span><span class="p">,</span><span class="mi">72</span><span class="p">,</span><span class="mi">38</span><span class="p">,</span><span class="mi">43</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">50</span><span class="p">],</span> <span class="n">GradientColors</span><span class="p">.</span><span class="n">orngPink</span><span class="p">)],</span> <span class="n">title</span><span class="p">:</span> <span class="s">&#34;Title&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p><img src="https://user-images.githubusercontent.com/2826764/131211991-eca64276-cf05-423f-a78a-697c55e44bbc.gif" width="50%"></img></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"> <span class="n">PieChartView</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mi">54</span><span class="p">,</span><span class="mi">32</span><span class="p">],</span> <span class="n">title</span><span class="p">:</span> <span class="s">&#34;Title&#34;</span><span class="p">,</span> <span class="n">legend</span><span class="p">:</span> <span class="s">&#34;Legendary&#34;</span><span class="p">)</span> <span class="c1">// legend is optional</span>
</span></span></code></pre></div><p><img loading="lazy" src="https://user-images.githubusercontent.com/2826764/131211998-e142657d-0ebc-43b7-aeda-07cae4d9e34b.png" alt=""  />
</p>
<p>而且这些卡片样式都是可以自己重新修订的，不用担心和自己的风格不一样。比如我之前的这个直接搬了两个卡片上去，它的阴影和我其他没有阴影的卡片是很不和谐的，于是我稍作修改，把他改成了和我其他卡片样式风格一致的样子。</p>
<p><img loading="lazy" src="https://tva1.sinaimg.cn/large/008i3skNly1gwuv6rhzk8j310g0u0jsq.jpg" alt=""  />
</p>
<p>因为之前开发仓促，使用的时候没有仔细修改样式，但是可以肯定这个库还有更多的发挥空间。总之这个库真的很不错，封装程度高又不失自定义的空间，推荐。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>IoTMonitor</title>
      <link>https://zzhgo.com/posts/iotmonitor/</link>
      <pubDate>Sun, 28 Nov 2021 02:54:12 +0000</pubDate>
      
      <guid>https://zzhgo.com/posts/iotmonitor/</guid>
      <description>IoTMonitor 用于展示IoT课程开发板的相关信息并进行控制
可以通过调用我们部署的服务器api及时获取开发板的温湿度数据，也可以发送开关电机的指令，并且可以设置温湿度超过某阈值后报警，同时有历史记录来提供任意时间段内好看的温湿度曲线
图片 简介 主页面 分为三个部分：设备状态，历史记录，设置
UI整体使用卡片式扁平设计
设备状态 刷新按钮和更新温湿度数据，温湿度可以显示此时设备的温湿度传感器信息，打开电机和关闭电机功能用于控制控制板马达
其中，温湿度会每秒自动进行更新，2位小数点保留
历史记录 通过DatePicker选择起止时间，再点击获取，即可得到此段时间内的温湿度曲线，触摸曲线还可以动态显示任意一点的数值（此处使用了[[SwiftUI 图表库 ChartView]]库）
默认显示2天前到现在的曲线，第一次打开app时会同步一次
设置 在设置页面，通过选择器选择阈值后点击保存，当温度高于此阈值时，开发板电机将会转动
同时，打开app后每次阈值的设置会被记录，以便查看设置情况
功能 实时显示开发板传感器温湿度 实时控制开发板电机马达转动与否 获取任意时间段开发板传感器温湿度历史曲线 通过设置过热阈值，当温度超过此值，进行报警 后台实时更新 实现 该app主要通过HTTP GET和POST请求像我们的服务器后端发送请求，后端通过电信平台的api调用来发送相关指令，电信平台再把指令下达到开发板，来实现app与开发板的交互
该app的UI部分复用项目Memo的代码</description>
      <content:encoded><![CDATA[<h1 id="iotmonitor">IoTMonitor</h1>
<p>用于展示IoT课程开发板的相关信息并进行控制</p>
<p>可以通过调用我们部署的服务器api及时获取开发板的温湿度数据，也可以发送开关电机的指令，并且可以设置温湿度超过某阈值后报警，同时有历史记录来提供任意时间段内好看的温湿度曲线</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/IoTMonitor%e5%b1%95%e7%a4%bagif.gif" alt=""  />
</p>
<h2 id="图片">图片</h2>
<p><img loading="lazy" src="https://tva1.sinaimg.cn/large/008i3skNly1gwuux5q5zhj30v90u0wgv.jpg" alt=""  />
</p>
<h2 id="简介">简介</h2>
<h3 id="主页面">主页面</h3>
<p>分为三个部分：设备状态，历史记录，设置</p>
<p>UI整体使用卡片式扁平设计</p>
<h4 id="设备状态">设备状态</h4>
<p>刷新按钮和更新温湿度数据，温湿度可以显示此时设备的温湿度传感器信息，打开电机和关闭电机功能用于控制控制板马达</p>
<p>其中，温湿度会每秒自动进行更新，2位小数点保留</p>
<p><img loading="lazy" src="https://tva1.sinaimg.cn/large/008i3skNly1gwuv4m8stbj30zu0u0gmq.jpg" alt=""  />
</p>
<h4 id="历史记录">历史记录</h4>
<p>通过DatePicker选择起止时间，再点击获取，即可得到此段时间内的温湿度曲线，触摸曲线还可以动态显示任意一点的数值（此处使用了[[SwiftUI 图表库 ChartView]]库）</p>
<p>默认显示2天前到现在的曲线，第一次打开app时会同步一次</p>
<p><img loading="lazy" src="https://tva1.sinaimg.cn/large/008i3skNly1gwuv6rhzk8j310g0u0jsq.jpg" alt=""  />
</p>
<h4 id="设置">设置</h4>
<p>在设置页面，通过选择器选择阈值后点击保存，当温度高于此阈值时，开发板电机将会转动</p>
<p>同时，打开app后每次阈值的设置会被记录，以便查看设置情况</p>
<p><img loading="lazy" src="https://tva1.sinaimg.cn/large/008i3skNly1gwuvd7193mj30zu0u0752.jpg" alt=""  />
</p>
<h2 id="功能">功能</h2>
<ul>
<li>实时显示开发板传感器温湿度</li>
<li>实时控制开发板电机马达转动与否</li>
<li>获取任意时间段开发板传感器温湿度历史曲线</li>
<li>通过设置过热阈值，当温度超过此值，进行报警</li>
<li>后台实时更新</li>
</ul>
<h2 id="实现">实现</h2>
<p>该app主要通过HTTP GET和POST请求像我们的服务器后端发送请求，后端通过电信平台的api调用来发送相关指令，电信平台再把指令下达到开发板，来实现app与开发板的交互</p>
<p>该app的UI部分复用项目<a href="https://github.com/acsoto/Memo">Memo</a>的代码</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Memo文档</title>
      <link>https://zzhgo.com/posts/memo%E6%96%87%E6%A1%A3/</link>
      <pubDate>Thu, 28 Oct 2021 17:29:00 +0000</pubDate>
      
      <guid>https://zzhgo.com/posts/memo%E6%96%87%E6%A1%A3/</guid>
      <description>Memo Memo用于随时记录，记录生活中的某一刻，记录今天的心情，或是记录看过的一部电影，一本书，留下自己此时的感想，并在自己最爱的电影或书籍的二刷三刷后再次记录下时间和新的想法&amp;hellip;
灵感来源于豆瓣，比起豆瓣的功能多出的个人需求为：需要一个简洁没有过量冗余信息的片单和书单记录软件，记录二刷，三刷的时间，以及想要随时记录每一天，并且在几年后回顾那年今日，留一些感动与感慨，让每一天都值得被纪念，故开发此软件。
图片 （介绍及短评摘自豆瓣，侵删）
Mac, iPad适配
简介 主页面 主界面分为3个标签：主页，电影，书籍
主页 电影 这里是你看过的电影片单，你可以随时看到你标记过的所有电影，以及在任何时候添加一个新的电影进入你的片单
进入某条电影，如果你输入的电影在数据库之中（数据来自豆瓣，侵删），你就可以看到关于电影的介绍：演员，导演，豆瓣评分，类别，介绍等，以及最重要的，在最下方，看到你第一次观看的时间以及感想
当然，点击此方框，你可以进入到第二次标记的页面，记录下你的第二次观影以及新的感想
书籍 类似电影，这里是你的书单，你可以添加你看过的书籍，并且记录第n次阅读的体验，相信每一次阅读，都会发现不少新东西
功能 标记某一天的感受 标记某本电影，某本书 多次标记某电影和书的观看时间和感受 自动展示电影和书籍的相关图片与简介 图文并茂的主页卡片展示设计 在主页展示进一个月看过的电影 在主页展示今天以及那年今日的感想 架构以及实现 源代码文件共25个
主要分为三个部分：Controller Model Views
Controller 一些静态函数，实现点击界面按钮后的某些后端反应以及后端用到的函数，如图像获取，日期格式化，Mark筛选等
其中图片的读取使用了异步加载url的方式，如果url没有解析成功将不会显示图片
class ImageLoader: ObservableObject { var didChange = PassthroughSubject&amp;lt;Data, Never&amp;gt;() var data = Data() { didSet { didChange.send(data) } } init(urlString: String) { guard let url = URL(string: urlString) else { return } let task = URLSession.shared.dataTask(with: url) { (data, response, error) in guard let data = data else { return } DispatchQueue.</description>
      <content:encoded><![CDATA[<h1 id="memo">Memo</h1>
<p>Memo用于随时记录，记录生活中的某一刻，记录今天的心情，或是记录看过的一部电影，一本书，留下自己此时的感想，并在自己最爱的电影或书籍的二刷三刷后再次记录下时间和新的想法&hellip;</p>
<p>灵感来源于豆瓣，比起豆瓣的功能多出的个人需求为：需要一个简洁没有过量冗余信息的片单和书单记录软件，记录二刷，三刷的时间，以及想要随时记录每一天，并且在几年后回顾那年今日，留一些感动与感慨，让每一天都值得被纪念，故开发此软件。</p>
<h2 id="图片">图片</h2>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/OMRjEl.png" alt=""  />
</p>
<p>（介绍及短评摘自豆瓣，侵删）</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/4qk5Hd.jpg" alt="iPad适配"  />
</p>
<p>Mac, iPad适配</p>
<h2 id="简介">简介</h2>
<h3 id="主页面">主页面</h3>
<p>主界面分为3个标签：主页，电影，书籍</p>
<h5 id="主页">主页</h5>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/nU8yrj.jpg" alt="观"  />
</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/4mxT4Y.jpg" alt="记"  />
</p>
<h5 id="电影">电影</h5>
<p>这里是你看过的电影片单，你可以随时看到你标记过的所有电影，以及在任何时候添加一个新的电影进入你的片单</p>
<p>进入某条电影，如果你输入的电影在数据库之中（数据来自豆瓣，侵删），你就可以看到关于电影的介绍：演员，导演，豆瓣评分，类别，介绍等，以及最重要的，在最下方，看到你第一次观看的时间以及感想</p>
<p>当然，点击此方框，你可以进入到第二次标记的页面，记录下你的第二次观影以及新的感想</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/somvRM.jpg" alt="电影列表"  />
</p>
<h5 id="书籍">书籍</h5>
<p>类似电影，这里是你的书单，你可以添加你看过的书籍，并且记录第n次阅读的体验，相信每一次阅读，都会发现不少新东西</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/v7ziTD.jpg" alt="书"  />
</p>
<h2 id="功能">功能</h2>
<ul>
<li>标记某一天的感受</li>
<li>标记某本电影，某本书</li>
<li>多次标记某电影和书的观看时间和感受</li>
<li>自动展示电影和书籍的相关图片与简介</li>
<li>图文并茂的主页卡片展示设计</li>
<li>在主页展示进一个月看过的电影</li>
<li>在主页展示今天以及那年今日的感想</li>
</ul>
<h2 id="架构以及实现">架构以及实现</h2>
<p>源代码文件共25个</p>
<p>主要分为三个部分：Controller Model Views</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/1Iyk57.jpg" alt="源文件树"  />
</p>
<h4 id="controller">Controller</h4>
<p>一些静态函数，实现点击界面按钮后的某些后端反应以及后端用到的函数，如图像获取，日期格式化，Mark筛选等</p>
<p>其中图片的读取使用了异步加载url的方式，如果url没有解析成功将不会显示图片</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">ImageLoader</span><span class="p">:</span> <span class="n">ObservableObject</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">didChange</span> <span class="p">=</span> <span class="n">PassthroughSubject</span><span class="p">&lt;</span><span class="n">Data</span><span class="p">,</span> <span class="n">Never</span><span class="p">&gt;()</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">data</span> <span class="p">=</span> <span class="n">Data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">didSet</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">didChange</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">init</span><span class="p">(</span><span class="n">urlString</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">url</span> <span class="p">=</span> <span class="n">URL</span><span class="p">(</span><span class="n">string</span><span class="p">:</span> <span class="n">urlString</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="kd">let</span> <span class="nv">task</span> <span class="p">=</span> <span class="n">URLSession</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">dataTask</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
</span></span><span class="line"><span class="cl">            <span class="k">guard</span> <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="n">data</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">DispatchQueue</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">async</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="kc">self</span><span class="p">.</span><span class="n">data</span> <span class="p">=</span> <span class="n">data</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">task</span><span class="p">.</span><span class="n">resume</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="model">Model</h4>
<p>主要用到的对象为Mark：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Mark</span><span class="p">:</span> <span class="n">Codable</span><span class="p">,</span> <span class="n">Identifiable</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">index</span><span class="p">:</span><span class="nb">Int</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">type</span><span class="p">:</span><span class="n">ModelType</span> <span class="p">=</span> <span class="n">ModelType</span><span class="p">.</span><span class="n">NONE</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">name</span> <span class="p">=</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">dates</span><span class="p">:</span> <span class="p">[</span><span class="n">Date</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">feeling</span> <span class="p">=</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">init</span><span class="p">(</span><span class="n">index</span><span class="p">:</span> <span class="nb">Int</span><span class="p">,</span><span class="n">type</span><span class="p">:</span><span class="n">ModelType</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span><span class="nb">String</span><span class="p">,</span> <span class="n">date</span><span class="p">:</span><span class="n">Date</span><span class="p">,</span> <span class="n">feeling</span><span class="p">:</span><span class="nb">String</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="kc">self</span><span class="p">.</span><span class="n">index</span> <span class="p">=</span> <span class="n">index</span>
</span></span><span class="line"><span class="cl">        <span class="kc">self</span><span class="p">.</span><span class="n">type</span> <span class="p">=</span> <span class="n">type</span>
</span></span><span class="line"><span class="cl">        <span class="kc">self</span><span class="p">.</span><span class="n">name</span> <span class="p">=</span> <span class="n">name</span>
</span></span><span class="line"><span class="cl">        <span class="kc">self</span><span class="p">.</span><span class="n">dates</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">date</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="kc">self</span><span class="p">.</span><span class="n">feeling</span> <span class="p">=</span> <span class="n">feeling</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Movie, Book 为电影和书籍的简介，不进行重复的展示</p>
<p>他们遵循MarkableObject协议，用于在展示Mark详情时读取object后再作类型判断</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">struct</span> <span class="nc">Movie</span><span class="p">:</span> <span class="nb">Hashable</span><span class="p">,</span> <span class="n">Codable</span><span class="p">,</span> <span class="n">Identifiable</span><span class="p">,</span> <span class="n">MarkableObject</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">id</span><span class="p">:</span> <span class="nb">String</span> <span class="p">=</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>ModelData负责数据存储的任务</p>
<p>用到了自带的UserDefaults.standard存储数据</p>
<p>movies和books分别为电影和书籍数据集，内置在app中</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kr">final</span> <span class="kd">class</span> <span class="nc">ModelData</span><span class="p">:</span> <span class="n">ObservableObject</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">moviesDict</span> <span class="p">=</span> <span class="n">getMoviesDict</span><span class="p">(</span><span class="n">movies</span><span class="p">:</span> <span class="n">load</span><span class="p">(</span><span class="s">&#34;movies.json&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">booksDict</span> <span class="p">=</span> <span class="n">getBooksDict</span><span class="p">(</span><span class="n">books</span><span class="p">:</span> <span class="n">load</span><span class="p">(</span><span class="s">&#34;books.json&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="p">@</span><span class="n">Published</span> <span class="kd">var</span> <span class="nv">marks</span><span class="p">:</span> <span class="p">[</span><span class="n">Mark</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">init</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">loadMarks</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">func</span> <span class="nf">loadMarks</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">marks</span> <span class="p">=</span> <span class="n">UserDefaults</span><span class="p">.</span><span class="n">standard</span><span class="p">.</span><span class="n">object</span><span class="p">(([</span><span class="n">Mark</span><span class="p">]).</span><span class="kc">self</span><span class="p">,</span> <span class="n">with</span><span class="p">:</span> <span class="s">&#34;Marks&#34;</span><span class="p">)</span> <span class="p">??</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">func</span> <span class="nf">saveMarks</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">let</span> <span class="nv">standard</span> <span class="p">=</span> <span class="n">UserDefaults</span><span class="p">.</span><span class="n">standard</span>
</span></span><span class="line"><span class="cl">        <span class="n">standard</span><span class="p">.</span><span class="kr">set</span><span class="p">(</span><span class="n">object</span><span class="p">:</span> <span class="n">marks</span><span class="p">,</span> <span class="n">forKey</span><span class="p">:</span> <span class="s">&#34;Marks&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>ModelType为枚举类型，用于Mark类型判断</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">enum</span> <span class="nc">ModelType</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="n">Codable</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="n">NONE</span> <span class="p">=</span> <span class="s">&#34;无&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="n">MOVIE</span> <span class="p">=</span> <span class="s">&#34;电影&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="n">BOOK</span> <span class="p">=</span> <span class="s">&#34;书籍&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="n">DAY</span> <span class="p">=</span> <span class="s">&#34;今天&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="views">Views</h4>
<p>界面UI</p>
<p>用到了environmentObject来同步各个界面的数据</p>
<p>父界面给子界面传递@Binding的变量，子界面拿到引用直接演示和修改，不会出现数据不同步的问题</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="p">@</span><span class="n">main</span>
</span></span><span class="line"><span class="cl"><span class="kd">struct</span> <span class="nc">MemoApp</span><span class="p">:</span> <span class="n">App</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">@</span><span class="n">StateObject</span> <span class="kd">private</span> <span class="kd">var</span> <span class="nv">modelData</span> <span class="p">=</span> <span class="n">ModelData</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">Scene</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">WindowGroup</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">ContentView</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                    <span class="p">.</span><span class="n">environmentObject</span><span class="p">(</span><span class="n">modelData</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h5 id="mainmenu">MainMenu</h5>
<p>MarkList: Mark列表，即展示电影和书籍列表</p>
<p>使用NavigationLink，向子界面：MarkDetail传递mark的引用</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/1qxgoz.png" alt=""  />
</p>
<p>HomeView: 主界面</p>
<h5 id="mark">Mark</h5>
<p>关于Mark的界面</p>
<p>MarkDetail: 一个Mark的详情</p>
<p>大部分子界面都如此UI一样，引入modelData的环境变量，承接上一级传下来的@Binding变量，实现数据的同步</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="p">@</span><span class="n">EnvironmentObject</span> <span class="kd">var</span> <span class="nv">modelData</span><span class="p">:</span> <span class="n">ModelData</span>
</span></span><span class="line"><span class="cl"><span class="p">@</span><span class="n">Binding</span> <span class="kd">var</span> <span class="nv">mark</span><span class="p">:</span> <span class="n">Mark</span>
</span></span></code></pre></div><p>其中要进行object的解析，如果用户输入能索引本地数据集的一个条目上，将会展示此object的详情</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/oEbVAd.png" alt=""  />
</p>
<p>MarkAdd: Mark增加界面</p>
<p>MarkEdit: Mark修改界面</p>
<p>MarkToday: 标记今天界面</p>
<p>这三个UI都用到了@State来实时同步Form表单中的信息</p>
<p>以至于用户输入能够及时的反应在变量上并且写入modelData</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/Lp7xQ3.png" alt=""  />
</p>
<h4 id="kit">Kit</h4>
<p>其他组件</p>
<p><img loading="lazy" src="https://pic.mcac.cc/soto-pictures/2021-12/5YOzFK.png" alt="其他组件"  />
</p>
<p>电影和书籍详情，时间线，圆形和方形图片，卡片组件等</p>
<p>均已展示在各个页面中</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
